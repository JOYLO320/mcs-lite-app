{
  "_args": [
    [
      {
        "raw": "react-style@github:mediatek-cloud/react-style",
        "scope": null,
        "escapedName": "react-style",
        "name": "react-style",
        "rawSpec": "github:mediatek-cloud/react-style",
        "spec": "github:mediatek-cloud/react-style",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:mediatek-cloud/react-style.git",
          "sshUrl": "git+ssh://git@github.com/mediatek-cloud/react-style.git",
          "httpsUrl": "git+https://github.com/mediatek-cloud/react-style.git",
          "gitUrl": "git://github.com/mediatek-cloud/react-style.git",
          "shortcut": "github:mediatek-cloud/react-style",
          "directUrl": "https://raw.githubusercontent.com/mediatek-cloud/react-style/master/package.json"
        }
      },
      "/Users/blue-mtk/mtk/mcs-lite-view/node_modules/@mtk/mcs-components"
    ]
  ],
  "_from": "mediatek-cloud/react-style",
  "_id": "react-style@0.5.5",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-style",
  "_phantomChildren": {
    "core-js": "1.2.7",
    "loose-envify": "1.3.0",
    "promise": "7.1.1",
    "ua-parser-js": "0.7.11"
  },
  "_requested": {
    "raw": "react-style@github:mediatek-cloud/react-style",
    "scope": null,
    "escapedName": "react-style",
    "name": "react-style",
    "rawSpec": "github:mediatek-cloud/react-style",
    "spec": "github:mediatek-cloud/react-style",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:mediatek-cloud/react-style.git",
      "sshUrl": "git+ssh://git@github.com/mediatek-cloud/react-style.git",
      "httpsUrl": "git+https://github.com/mediatek-cloud/react-style.git",
      "gitUrl": "git://github.com/mediatek-cloud/react-style.git",
      "shortcut": "github:mediatek-cloud/react-style",
      "directUrl": "https://raw.githubusercontent.com/mediatek-cloud/react-style/master/package.json"
    }
  },
  "_requiredBy": [
    "/@mtk/mcs-components",
    "/mcs-displaycard-integer/@mtk/mcs-components"
  ],
  "_resolved": "git://github.com/mediatek-cloud/react-style.git#434e5ee21bdea92d4c5151c6ee7eb7abedd6b116",
  "_shasum": "acc7afc1991fe3cffd0c55fdcb18019306399865",
  "_shrinkwrap": null,
  "_spec": "react-style@github:mediatek-cloud/react-style",
  "_where": "/Users/blue-mtk/mtk/mcs-lite-view/node_modules/@mtk/mcs-components",
  "bugs": {
    "url": "https://github.com/js-next/react-style/issues"
  },
  "dependencies": {
    "fbjs": "^0.4.0"
  },
  "description": "Maintainable styling for React.js components",
  "devDependencies": {
    "jest-cli": "^0.4.0",
    "jshint": "^2.6.3",
    "jsx-loader": "^0.12.2",
    "react": ">=0.12.0 || 0.13.0-rc1 || 0.13.0-rc2 || >=0.13.0",
    "react-tools": ">=0.12.0 || 0.13.0-rc1 || 0.13.0-rc2 || >=0.13.0",
    "webpack": ">=1.4.0 || >= 1.5.0 || >= 1.6.0 || >= 1.7.0"
  },
  "gitHead": "434e5ee21bdea92d4c5151c6ee7eb7abedd6b116",
  "homepage": "https://github.com/js-next/react-style#readme",
  "jest": {
    "rootDir": "",
    "scriptPreprocessor": "jest/preprocessor.js"
  },
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-style",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.0"
  },
  "readme": "# React Style\n\n[![Build Status](https://travis-ci.org/js-next/react-style.svg?branch=master)](https://travis-ci.org/js-next/react-style)\n[![Code Climate](https://codeclimate.com/github/js-next/react-style/badges/gpa.svg)](https://codeclimate.com/github/js-next/react-style)\n\n**Note 25 Oct**\n\nThe current version of React Style does not support React 0.14, we are working on that and I hope to have a React 0.14 compatible release within the next 2 weeks.\n\n\nReact Style is an approach for styling [React][] components. It uses the same\nsyntax as `StyleSheet.create` from [React Native][].\n\nDefine styles using full power of JavaScript:\n\n    var StyleSheet = require('react-style')\n\n    var styles = StyleSheet.create({\n        foo: {\n          color: 'red',\n          backgroundColor: 'white'\n        }\n    })\n\nStyle React components:\n\n    var React = require('react')\n\n    class HelloWorld extends React.Component{\n\n      render() {\n        var dynamicStyles = {color: this.props.color}\n        return <div styles={[styles.foo, dynamicStyles]}>Hello, world!</div>\n      }\n\n    }\n\nNotice that the property is `styles`, not `style`. By default styles are applied to the DOM as inline styles.\n\n\n\n## Extracting styles into CSS at build time\n\nThere's [React Style Webpack plugin][] which extends [Webpack][] with the\nability to extract styles from your application at build time. The result is a\n`bundle.css` file which can be added to `<head>`.\n\nGenerated CSS class names are descriptive by default and minimized when using\n`NODE_ENV=production`.\n\nTo make sure that the order of the `styles` property is maintained, React Style\nuses a CSS overrides hack which results in the above example results in:\n\n    .foo,.foo.foo1,.foo.foo1.foo2. (etc.)\n\nBy default an amount of 10 is used, but can be adjusted by setting the\n`maxOverridesLength` property:\n\n    var StyleSheet = require('react-style')\n    StyleSheet.maxOverridesLength = 1;\n\nSource Maps are supported, but only for the generated JavaScript.\n\n## Syntax helpers for writing styles\n\nThere's [React Style syntax][] which allows you to write styles like this:\n\n    var styles = StyleSheet.create`\n      .foo {\n        color: red;\n        background-color: white;\n      }\n    `\n\nAnd have it transformed into:\n\n    var styles = StyleSheet.create({\n      foo: {\n        color: 'red',\n        backgroundColor: 'white'\n      }\n    })\n\nThis syntax is consistent with [ES6 tagged template literal][es6-templ].\n\nThe syntax helpers are convenient when transitioning a large CSS\ncode base to React Style. It makes it possible to directly copy paste styles \nfrom your CSS and later refactor them into a more modular form.\n\nNote that we only support classNames of 1 level deep.\n\n## Support for media queries\nMedia queries are supported by React Style with the following syntax:\n\n    var fooStyles = StyleSheet.create({\n        bar: {\n           color: 'green'\n        },\n        '@media screen and (min-width: 800px)': {\n            bar: {\n                color: 'purple'\n            }\n        }\n    });\n\nIf you want to use media queries inside the `render` function, we recommend\nusing `window.matchMedia`.\n\n## What's wrong with CSS/SCSS/less?\nA lot, and @vjeux covered it pretty good in his presentation: [CSS in JS][css-in-js]\n\n## Why isn't this included inside React.js yet?\nSee https://github.com/facebook/react/pull/2196\n\n## Not supported CSS features\n\nReact Style does not support CSS selectors, pseudo-classes and CSS animation.\nMostly because we try to avoid implicit behaviour and want the user to make\nlayout decisions inside the `render()` function.\n\nCSS selectors introduce implicit behaviour by not having a direct link with\nthe elements on which they're applied. Therefore there is no way of knowing\nwhat the consequences are, and this easily leads to refactoring issues. Instead\nyou should be using plain JavaScript variables.\n\nClasses with pseudo-classes have a higher precedence then classes with no\npseudo-classes, which results in issues if you want to override styling in\n\"higher-level\" components. In some cases(`:before`, `after`, etc.) a component\nis easily added, in others (`active`, `focus`, `hover`, etc) plain JavaScript\nwill do the trick. In all, you don't need CSS for this. In some cases though\nyou might want to use pseudo-classes (like styling a scrollbar) - which we do\nsupport.\n\nAnimations inside CSS also introduce implicit behaviour, as CSS animations are\ndecoupled from logic. By being decoupled, the state of the component is split\nbetween the component and the CSS animation. We however believe state should be\ncontained within a component. An example of solving this using JS is [React \nMagician][react-magician].\n\nLicense\n---\nMIT\n\n[Webpack]: https://webpack.github.io\n[React]: https://facebook.github.io/react/\n[React Style Webpack plugin]: https://github.com/js-next/react-style-webpack-plugin\n[React Style syntax]: https://github.com/js-next/react-style-syntax\n[es6-templ]: http://tc39wiki.calculist.org/es6/template-strings/\n[css-in-js]: https://speakerdeck.com/vjeux/react-css-in-js\n[react-magician]: https://github.com/SanderSpies/react-magician\n[React Native]: http://facebook.github.io/react-native/docs/stylesheet.html#content\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/js-next/react-style.git"
  },
  "scripts": {
    "test": "jest"
  },
  "version": "0.5.5"
}
