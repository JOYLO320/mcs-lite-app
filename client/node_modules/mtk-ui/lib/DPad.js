'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _jsx2 = require('babel-runtime/helpers/jsx');

var _jsx3 = _interopRequireDefault(_jsx2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _omit2 = require('lodash/fp/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _emptyFunction = require('fbjs/lib/emptyFunction');

var _emptyFunction2 = _interopRequireDefault(_emptyFunction);

var _EventListener = require('fbjs/lib/EventListener');

var _EventListener2 = _interopRequireDefault(_EventListener);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _getEventTargetFromPropsSafely = require('./utils/getEventTargetFromPropsSafely');

var _getEventTargetFromPropsSafely2 = _interopRequireDefault(_getEventTargetFromPropsSafely);

var _DPad = require('./styles/DPad.css');

var _DPad2 = _interopRequireDefault(_DPad);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var omitList = ['enableKeyCode', 'eventTarget', 'keys', 'keyCodes'];

var DPad = (0, _pureRenderDecorator2.default)(_class = (_temp = _class2 = function (_React$Component) {
  (0, _inherits3.default)(DPad, _React$Component);

  function DPad() {
    var _ref;

    (0, _classCallCheck3.default)(this, DPad);

    for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
      props[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = DPad.__proto__ || Object.getPrototypeOf(DPad)).call.apply(_ref, [this].concat(props)));

    _this.state = {
      direction: null, /* 'DPAD_UP', 'DPAD_DOWN', 'DPAD_LEFT', 'DPAD_RIGHT'  */
      status: null };

    _this.keyupEventListener = null;
    _this.keydownEventListener = null;

    _this.preKeyCode = null; /* 長按狀態不要重複送出 */
    return _this;
  }

  (0, _createClass3.default)(DPad, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (!this.keyupEventListener && !this.keydownEventListener && this.props.enableKeyCode) {
        this.addEventListener();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (!this.keyupEventListener && !this.keydownEventListener && this.props.enableKeyCode) {
        this.addEventListener();
      } else if (this.keyupEventListener && this.keydownEventListener && !this.props.enableKeyCode) {
        this.removeEventListener();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.keyupEventListener && this.keydownEventListener) {
        this.removeEventListener();
      }
    }

    /**
     * onChange()
     * 當做了方向鍵上任何操作，將操作行為送出去。
     *
     * @param  {string} direction
     * @param  {string} status
     */

  }, {
    key: 'onChange',
    value: function onChange(e, _ref2) {
      var direction = _ref2.direction,
          status = _ref2.status;
      var keys = this.props.keys;


      this.props.onChange(e, { direction: keys[direction], status: keys[status] });
      this.setState({ direction: direction, status: status });
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var keyCodes = this.props.keyCodes;

      /* 長按狀態不要重複送出 */

      if (this.preKeyCode !== e.keyCode) {
        switch (e.keyCode) {
          case keyCodes.DPAD_UP:
            this.onChange(e, { direction: 'DPAD_UP', status: 'DPAD_PRESS' });
            break;
          case keyCodes.DPAD_DOWN:
            this.onChange(e, { direction: 'DPAD_DOWN', status: 'DPAD_PRESS' });
            break;
          case keyCodes.DPAD_LEFT:
            this.onChange(e, { direction: 'DPAD_LEFT', status: 'DPAD_PRESS' });
            break;
          case keyCodes.DPAD_RIGHT:
            this.onChange(e, { direction: 'DPAD_RIGHT', status: 'DPAD_PRESS' });
            break;
          default:
            break;
        }
      }

      this.preKeyCode = e.keyCode;
    }
  }, {
    key: 'onKeyUp',
    value: function onKeyUp(e) {
      var keyCodes = this.props.keyCodes;


      switch (e.keyCode) {
        case keyCodes.DPAD_UP:
          this.onChange(e, { direction: 'DPAD_UP', status: 'DPAD_RELEASE' });
          break;
        case keyCodes.DPAD_DOWN:
          this.onChange(e, { direction: 'DPAD_DOWN', status: 'DPAD_RELEASE' });
          break;
        case keyCodes.DPAD_LEFT:
          this.onChange(e, { direction: 'DPAD_LEFT', status: 'DPAD_RELEASE' });
          break;
        case keyCodes.DPAD_RIGHT:
          this.onChange(e, { direction: 'DPAD_RIGHT', status: 'DPAD_RELEASE' });
          break;
        default:
          break;
      }

      this.preKeyCode = null;
    }
  }, {
    key: 'onMouseDown',
    value: function onMouseDown(e, direction) {
      var _this2 = this;

      this.onChange(e, { direction: direction, status: 'DPAD_PRESS' });

      this.mouseupEventListener = _EventListener2.default.listen(document, 'mouseup', function () {
        _this2.onChange(e, { direction: direction, status: 'DPAD_RELEASE' });
        _this2.mouseupEventListener.remove(); /* fire once */
      });
    }
  }, {
    key: 'getEventTarget',
    value: function getEventTarget() {
      return (0, _getEventTargetFromPropsSafely2.default)(this.props);
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener() {
      var eventTarget = this.getEventTarget() || document;

      this.keyupEventListener = _EventListener2.default.listen(eventTarget, 'keyup', this.onKeyUp.bind(this));
      this.keydownEventListener = _EventListener2.default.listen(eventTarget, 'keydown', this.onKeyDown.bind(this));
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener() {
      this.keyupEventListener.remove();
      this.keydownEventListener.remove();
      this.keyupEventListener = null;
      this.keydownEventListener = null;
    }

    /**
     * renderCrossBar()
     * render 十字方向鍵。
     */

  }, {
    key: 'renderCrossBar',
    value: function renderCrossBar() {
      var _this3 = this;

      return (0, _jsx3.default)('div', {}, void 0, (0, _jsx3.default)('div', {
        className: _DPad2.default.wrapColumn
      }, void 0, _react2.default.createElement(
        'div',
        {
          ref: 'DPAD_UP',
          className: _DPad2.default.dTop,
          onMouseDown: function onMouseDown(e) {
            return _this3.onMouseDown(e, 'DPAD_UP');
          }
        },
        this.renderArrow('Top')
      ), (0, _jsx3.default)('div', {
        className: _DPad2.default.dEmpty
      }), _react2.default.createElement(
        'div',
        {
          ref: 'DPAD_DOWN',
          className: _DPad2.default.dBottom,
          onMouseDown: function onMouseDown(e) {
            return _this3.onMouseDown(e, 'DPAD_DOWN');
          }
        },
        this.renderArrow('Bottom')
      )), (0, _jsx3.default)('div', {
        className: _DPad2.default.wrapRow
      }, void 0, _react2.default.createElement(
        'div',
        {
          ref: 'DPAD_LEFT',
          className: _DPad2.default.dLeft,
          onMouseDown: function onMouseDown(e) {
            return _this3.onMouseDown(e, 'DPAD_LEFT');
          }
        },
        this.renderArrow('Left')
      ), (0, _jsx3.default)('div', {
        className: _DPad2.default.dEmpty
      }), _react2.default.createElement(
        'div',
        {
          ref: 'DPAD_RIGHT',
          className: _DPad2.default.dRight,
          onMouseDown: function onMouseDown(e) {
            return _this3.onMouseDown(e, 'DPAD_RIGHT');
          }
        },
        this.renderArrow('Right')
      )));
    }

    /**
     * renderCenterCircle()
     * render 中心圓。
     */

  }, {
    key: 'renderCenterCircle',
    value: function renderCenterCircle() {
      return (0, _jsx3.default)('div', {
        className: _DPad2.default.wrapRow
      }, void 0, (0, _jsx3.default)('div', {
        className: _DPad2.default.dCenter
      }, void 0, (0, _jsx3.default)('div', {
        className: _DPad2.default.centerCircle
      })));
    }

    /**
     * renderCrossBarMask()
     * render 'Press' 狀態下的遮罩陰影。
     */

  }, {
    key: 'renderCrossBarMask',
    value: function renderCrossBarMask() {
      var _state = this.state,
          direction = _state.direction,
          status = _state.status;


      return (0, _jsx3.default)('div', {}, void 0, (0, _jsx3.default)('div', {
        className: _DPad2.default.wrapColumn
      }, void 0, (0, _jsx3.default)('div', {
        className: status === 'DPAD_PRESS' && direction === 'DPAD_UP' ? _DPad2.default.maskTop : _DPad2.default.dEmpty
      }), (0, _jsx3.default)('div', {
        className: _DPad2.default.dEmpty
      }), (0, _jsx3.default)('div', {
        className: status === 'DPAD_PRESS' && direction === 'DPAD_DOWN' ? _DPad2.default.maskBottom : _DPad2.default.dEmpty
      })), (0, _jsx3.default)('div', {
        className: _DPad2.default.wrapRow
      }, void 0, (0, _jsx3.default)('div', {
        className: status === 'DPAD_PRESS' && direction === 'DPAD_LEFT' ? _DPad2.default.maskLeft : _DPad2.default.dEmpty
      }), (0, _jsx3.default)('div', {
        className: _DPad2.default.dEmpty
      }), (0, _jsx3.default)('div', {
        className: status === 'DPAD_PRESS' && direction === 'DPAD_RIGHT' ? _DPad2.default.maskRight : _DPad2.default.dEmpty
      })));
    }

    /**
     * renderArrow()
     * render 方向鍵上的箭頭方向。
     *
     * @params {string} placement
     */

  }, {
    key: 'renderArrow',
    value: function renderArrow(placement) {
      return (0, _jsx3.default)('div', {
        className: _DPad2.default['arrow' + placement]
      }, void 0, (0, _jsx3.default)('svg', {
        width: '12',
        height: '7.4',
        viewBox: '0 0 48 30'
      }, void 0, (0, _jsx3.default)('path', {
        d: 'M 24 0 L 0 24 L 6 30 L 24 12 L 42 30 L 48 24 Z',
        filter: 'url(#inset-shadow)'
      })));
    }

    /**
     * renderBackgroundCircleBorder()
     * render 方向鍵後的圓形背景的 border。
     */

  }, {
    key: 'renderBackgroundCircleBorder',
    value: function renderBackgroundCircleBorder() {
      return (0, _jsx3.default)('div', {
        className: _DPad2.default.backgroundCircleBorder
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          otherProps = (0, _objectWithoutProperties3.default)(_props, ['className']);


      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, (0, _omit3.default)(omitList, otherProps), {
          className: (0, _classnames2.default)(_DPad2.default.backgroundCircle, className)
        }),
        this.renderBackgroundCircleBorder(),
        this.renderCrossBar(),
        this.renderCrossBarMask(),
        this.renderCenterCircle()
      );
    }
  }]);
  return DPad;
}(_react2.default.Component), _class2.propTypes = {
  className: _react.PropTypes.string,
  onChange: _react.PropTypes.func,
  keys: _react.PropTypes.object,
  keyCodes: _react.PropTypes.object,
  enableKeyCode: _react.PropTypes.bool,
  eventTarget: _react.PropTypes.func }, _class2.defaultProps = {
  keys: {
    DPAD_UP: 'DPAD_UP',
    DPAD_DOWN: 'DPAD_DOWN',
    DPAD_LEFT: 'DPAD_LEFT',
    DPAD_RIGHT: 'DPAD_RIGHT',
    DPAD_PRESS: 'DPAD_PRESS',
    DPAD_RELEASE: 'DPAD_RELEASE'
  },
  keyCodes: {
    DPAD_UP: 38,
    DPAD_DOWN: 40,
    DPAD_LEFT: 37,
    DPAD_RIGHT: 39
  },
  enableKeyCode: false,
  onChange: _emptyFunction2.default
}, _temp)) || _class;

exports.default = DPad;
module.exports = exports['default'];