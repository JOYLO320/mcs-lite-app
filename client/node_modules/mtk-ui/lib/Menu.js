'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _emptyFunction = require('fbjs/lib/emptyFunction');

var _emptyFunction2 = _interopRequireDefault(_emptyFunction);

var _EventListener = require('fbjs/lib/EventListener');

var _EventListener2 = _interopRequireDefault(_EventListener);

var _getEventTargetFromPropsSafely = require('./utils/getEventTargetFromPropsSafely');

var _getEventTargetFromPropsSafely2 = _interopRequireDefault(_getEventTargetFromPropsSafely);

var _MenuItem = require('./MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _Card = require('./Card');

var _Card2 = _interopRequireDefault(_Card);

var _scrollBy = require('./utils/scrollBy');

var _scrollBy2 = _interopRequireDefault(_scrollBy);

var _withContext = require('recompose/withContext');

var _withContext2 = _interopRequireDefault(_withContext);

var _pure = require('recompose/pure');

var _pure2 = _interopRequireDefault(_pure);

var _Menu = require('./styles/Menu.css');

var _Menu2 = _interopRequireDefault(_Menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var menuItemFactory = (0, _react.createFactory)(_MenuItem2.default);

var Menu = (_dec = (0, _withContext2.default)({
  selectedValue: _react.PropTypes.any,
  onSelect: _react.PropTypes.func
}, function (props) {
  return {
    selectedValue: props.selectedValue,
    onSelect: props.onChange
  };
}), (0, _pure2.default)(_class = _dec(_class = (_temp = _class2 = function (_React$Component) {
  (0, _inherits3.default)(Menu, _React$Component);

  function Menu() {
    (0, _classCallCheck3.default)(this, Menu);
    return (0, _possibleConstructorReturn3.default)(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).apply(this, arguments));
  }

  (0, _createClass3.default)(Menu, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (Number.isInteger(this.props.focusedIndex)) {
        this.keyDownListener = _EventListener2.default.listen(this.getTarget(), 'keydown', this.onKeyDown.bind(this));
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      this.scrollToFocusedItem();

      if (Number.isInteger(prevProps.focusedIndex) === Number.isInteger(this.props.focusedIndex)) {
        return;
      } else if (Number.isInteger(this.props.focusedIndex)) {
        this.keyDownListener = _EventListener2.default.listen(this.getTarget(), 'keydown', this.onKeyDown.bind(this));
      } else {
        this.keyDownListener.remove();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.keyDownListener) {
        this.keyDownListener.remove();
      }
    }
  }, {
    key: 'onKeyDown',
    value: function onKeyDown(e) {
      var _props = this.props,
          children = _props.children,
          _props$items = _props.items,
          items = _props$items === undefined ? [] : _props$items,
          _props$focusedIndex = _props.focusedIndex,
          focusedIndex = _props$focusedIndex === undefined ? -1 : _props$focusedIndex,
          onFocusChange = _props.onFocusChange,
          onChange = _props.onChange;


      var lengthOfItems = children ? _react.Children.count(children) : items.length;

      switch (e.keyCode) {
        case 13:
          // enter
          var _ref = children && children[focusedIndex].props || items[focusedIndex] || {},
              value = _ref.value;

          onChange(e, value, focusedIndex);
          break;
        case 38:
          // up
          onFocusChange(e, Math.max(focusedIndex - 1, 0));
          break;
        case 40:
          // down
          onFocusChange(e, Math.min(focusedIndex + 1, lengthOfItems - 1));
          break;
        default:
          break;
      }
    }
  }, {
    key: 'getTarget',
    value: function getTarget() {
      return (0, _getEventTargetFromPropsSafely2.default)(this.props) || document;
    }
  }, {
    key: 'scrollToFocusedItem',
    value: function scrollToFocusedItem() {
      var focusedDOM = this.props.focusedIndex > -1 ? (0, _reactDom.findDOMNode)(this.refs.focus) : null;
      if (focusedDOM) {
        var menuDOM = (0, _reactDom.findDOMNode)(this);
        var focusedRect = focusedDOM.getBoundingClientRect();
        var menuRect = menuDOM.getBoundingClientRect();
        if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {
          var offsetY = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight - menuDOM.scrollTop;
          (0, _scrollBy2.default)(menuDOM)({ offsetY: offsetY, duration: 300 });
        }
      }
    }
  }, {
    key: 'renderItems',
    value: function renderItems() {
      var _this2 = this;

      var _props2 = this.props,
          children = _props2.children,
          _props2$items = _props2.items,
          items = _props2$items === undefined ? [] : _props2$items,
          focusedIndex = _props2.focusedIndex,
          menuItemTheme = _props2.menuItemTheme;


      var focusedIndexControlled = Number.isInteger(focusedIndex);

      var propsModifier = function propsModifier(props, index) {
        var focus = index === focusedIndex;

        return (0, _extends3.default)({}, props, {
          focus: focus,
          index: index,
          theme: menuItemTheme,
          key: props.key || index,
          ref: focus ? 'focus' : '',
          hoverDisabled: focusedIndexControlled,
          onMouseEnter: focusedIndexControlled && function (e) {
            return _this2.props.onFocusChange(e, index);
          },
          onMouseLeave: focusedIndexControlled && function (e) {
            return _this2.props.onFocusChange(e, -1);
          }
        });
      };

      if (children) {
        return _react.Children.map(children, function (child, index) {
          return (0, _react.cloneElement)(child, propsModifier(child.props, index));
        });
      }

      return items.map(function (props, index) {
        return menuItemFactory(propsModifier(props, index));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          items = _props3.items,
          selectedValue = _props3.selectedValue,
          onChange = _props3.onChange,
          onFocusChange = _props3.onFocusChange,
          focusedIndex = _props3.focusedIndex,
          eventTarget = _props3.eventTarget,
          className = _props3.className,
          otherProps = (0, _objectWithoutProperties3.default)(_props3, ['items', 'selectedValue', 'onChange', 'onFocusChange', 'focusedIndex', 'eventTarget', 'className']);


      return _react2.default.createElement(
        _Card2.default,
        (0, _extends3.default)({}, otherProps, { className: (0, _classnames2.default)(_Menu2.default.base, className) }),
        this.renderItems()
      );
    }
  }]);
  return Menu;
}(_react2.default.Component), _class2.propTypes = {
  className: _react.PropTypes.string,
  children: _react.PropTypes.node,
  items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    value: _react.PropTypes.any,
    children: _react.PropTypes.node
  })),
  menuItemTheme: _react.PropTypes.object,

  onChange: _react.PropTypes.func.isRequired, // (e, value, index) => {}
  selectedValue: _react.PropTypes.any,

  /**
   * Like `value`, if a `focusedIdex` is providerd, the `<Menu>`'s `focusedIdex`
   * will become [controlled](https://facebook.github.io/react/docs/forms.html#controlled-components).
   * If you want to update the `focusedIndex` in response to users' actions,
   * you could use the `onFocusChange` event.
   */
  focusedIndex: _react.PropTypes.number, // index of a item which should be scrolled to
  onFocusChange: _react.PropTypes.func, // (e, focusedIndex) => {}

  /**
   * The source of key events which the `<Menu />` listen to.
   */
  eventTarget: _react.PropTypes.func }, _class2.defaultProps = {
  onFocusChange: _emptyFunction2.default
}, _temp)) || _class) || _class);
exports.default = Menu;
module.exports = exports['default'];