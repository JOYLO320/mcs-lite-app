'use strict';

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _clampDate = require('../clampDate');

var _clampDate2 = _interopRequireDefault(_clampDate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var now = new Date();

describe('utils/clampDate', function () {
  it('Should return value datetime: clampDate when value is between max and min', function () {
    var result = (0, _clampDate2.default)({
      currentValue: (0, _moment2.default)(now),
      max: (0, _moment2.default)(now).add(1, 'day'),
      min: (0, _moment2.default)(now).subtract(1, 'day')
    });
    expect((0, _moment2.default)(result).format()).to.equal((0, _moment2.default)(now).format());
  });

  it('Should return max datetime: clampDate when value is over max', function () {
    var result = (0, _clampDate2.default)({
      currentValue: (0, _moment2.default)(now).add(2, 'day'),
      max: (0, _moment2.default)(now).add(1, 'day'),
      min: (0, _moment2.default)(now).subtract(1, 'day')
    });
    expect((0, _moment2.default)(result).format()).to.equal((0, _moment2.default)(now).add(1, 'day').format());
  });

  it('Should return min datetime: clampDate when value is under min', function () {
    var result = (0, _clampDate2.default)({
      currentValue: (0, _moment2.default)(now).subtract(2, 'day'),
      max: (0, _moment2.default)(now).add(1, 'day'),
      min: (0, _moment2.default)(now).subtract(1, 'day')
    });
    expect((0, _moment2.default)(result).format()).to.equal((0, _moment2.default)(now).subtract(1, 'day').format());
  });
});