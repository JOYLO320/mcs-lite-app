'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _jsx2 = require('babel-runtime/helpers/jsx');

var _jsx3 = _interopRequireDefault(_jsx2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _omit2 = require('lodash/fp/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _class, _class2, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactOverlays = require('react-overlays');

var _emptyFunction = require('fbjs/lib/emptyFunction');

var _emptyFunction2 = _interopRequireDefault(_emptyFunction);

var _SlideDown = require('./Transitions/SlideDown');

var _SlideDown2 = _interopRequireDefault(_SlideDown);

var _InputGroup = require('./InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _MiFold = require('mtk-icon/lib/MiFold');

var _MiFold2 = _interopRequireDefault(_MiFold);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _InputText = require('./InputText');

var _InputText2 = _interopRequireDefault(_InputText);

var _Menu = require('./Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _MenuItem = require('./MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _InputSelect = require('./styles/InputSelect.css');

var _InputSelect2 = _interopRequireDefault(_InputSelect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function defaultFilterFunc(item, inputValue) {
  return item.value.toLowerCase().includes(inputValue.toLowerCase());
}

function defaultValueRenderer(value) {
  return value;
}

function getFilteredItems(_ref) {
  var _ref$items = _ref.items,
      items = _ref$items === undefined ? [] : _ref$items,
      filterFunc = _ref.filterFunc,
      _ref$inputValue = _ref.inputValue,
      inputValue = _ref$inputValue === undefined ? '' : _ref$inputValue;

  return items.filter(function (item) {
    return filterFunc(item, inputValue);
  });
}

var InputSelect = (0, _pureRenderDecorator2.default)(_class = (_temp2 = _class2 = function (_React$Component) {
  (0, _inherits3.default)(InputSelect, _React$Component);

  function InputSelect() {
    var _ref2;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, InputSelect);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref2 = InputSelect.__proto__ || Object.getPrototypeOf(InputSelect)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
      inputValue: '',
      isMenuShow: false,
      focusedIndex: -1
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(InputSelect, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props = this.props,
          items = _props.items,
          filterFunc = _props.filterFunc,
          value = _props.value,
          valueRenderer = _props.valueRenderer;

      this.setInputValueAndFocusedIndexToState({ items: items, filterFunc: filterFunc, inputValue: valueRenderer(value) });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (['items', 'filterFunc', 'value', 'valueRenderer'].some(function (key) {
        return nextProps[key] !== _this2.props[key];
      })) {
        // some props related to inputValue and focusedIndex have been changed
        var items = nextProps.items,
            filterFunc = nextProps.filterFunc,
            value = nextProps.value,
            valueRenderer = nextProps.valueRenderer;

        this.setInputValueAndFocusedIndexToState({ items: items, filterFunc: filterFunc, inputValue: valueRenderer(value) });
      }
    }
  }, {
    key: 'onItemClick',
    value: function onItemClick(e, value, index) {
      this.setState({ focusedIndex: index });
      this.closeMenu();
    }
  }, {
    key: 'onInputChange',
    value: function onInputChange(e) {
      var _props2 = this.props,
          items = _props2.items,
          filterFunc = _props2.filterFunc;

      this.setInputValueAndFocusedIndexToState({ items: items, filterFunc: filterFunc, inputValue: e.target.value });

      if (this.props.onInputChange) {
        this.props.onInputChange(e);
      }
    }
  }, {
    key: 'onInputKeyDown',
    value: function onInputKeyDown(e) {
      var isMenuShow = this.state.isMenuShow;


      switch (e.keyCode) {
        case 9:
          // tab
          if (e.shiftKey || !isMenuShow) return;
          this.closeMenu();
          break;
        case 13:
          // enter
          // onItemClick would be invoke
          break;
        default:
          if (!isMenuShow) {
            this.openMenu();
          }
          break;
      }
    }
  }, {
    key: 'onMenuFocusChange',
    value: function onMenuFocusChange(e, index) {
      this.setState({ focusedIndex: index });
    }
  }, {
    key: 'onMenuExited',
    value: function onMenuExited(e) {
      var _state = this.state,
          focusedIndex = _state.focusedIndex,
          inputValue = _state.inputValue;
      var _props3 = this.props,
          items = _props3.items,
          filterFunc = _props3.filterFunc,
          valueRenderer = _props3.valueRenderer;

      var _getFilteredItems = getFilteredItems({ items: items, filterFunc: filterFunc, inputValue: inputValue }),
          _getFilteredItems$foc = _getFilteredItems[focusedIndex];

      _getFilteredItems$foc = _getFilteredItems$foc === undefined ? {} : _getFilteredItems$foc;
      var selectedValue = _getFilteredItems$foc.value;

      this.props.onChange(e, selectedValue);

      // if an user clean up inputValue then select the same value, cwrp will not be triggered
      if (selectedValue === this.props.value) {
        this.setState({ inputValue: valueRenderer(selectedValue) });
      }
    }
  }, {
    key: 'setInputValueAndFocusedIndexToState',
    value: function setInputValueAndFocusedIndexToState(_ref3) {
      var items = _ref3.items,
          filterFunc = _ref3.filterFunc,
          _ref3$inputValue = _ref3.inputValue,
          inputValue = _ref3$inputValue === undefined ? '' : _ref3$inputValue;

      var filteredItems = getFilteredItems({ items: items, filterFunc: filterFunc, inputValue: inputValue });

      var focusedIndex = void 0;

      if (inputValue === '') {
        focusedIndex = -1;
      } else {
        focusedIndex = filteredItems[0] ? 0 : -1;
      }

      this.setState({
        inputValue: inputValue,
        focusedIndex: focusedIndex
      });
    }
  }, {
    key: 'openMenu',
    value: function openMenu() {
      (0, _reactDom.findDOMNode)(this.refs.inputText).focus();
      this.setState({ isMenuShow: true });
    }
  }, {
    key: 'closeMenu',
    value: function closeMenu() {
      this.setState({ isMenuShow: false });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props4 = this.props,
          value = _props4.value,
          noResultsContent = _props4.noResultsContent,
          placeholder = _props4.placeholder,
          items = _props4.items,
          onChange = _props4.onChange,
          filterFunc = _props4.filterFunc,
          className = _props4.className,
          inputTextProps = _props4.inputTextProps,
          buttonProps = _props4.buttonProps,
          menuItemTheme = _props4.menuItemTheme,
          otherProps = (0, _objectWithoutProperties3.default)(_props4, ['value', 'noResultsContent', 'placeholder', 'items', 'onChange', 'filterFunc', 'className', 'inputTextProps', 'buttonProps', 'menuItemTheme']);
      var _state2 = this.state,
          inputValue = _state2.inputValue,
          isMenuShow = _state2.isMenuShow,
          focusedIndex = _state2.focusedIndex;


      var filteredItems = getFilteredItems({ items: items, filterFunc: filterFunc, inputValue: inputValue });

      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, (0, _omit3.default)(['valueRenderer'], otherProps), { className: (0, _classnames2.default)(_InputSelect2.default.base, className) }),
        (0, _jsx3.default)(_InputGroup2.default, {
          onClick: this.openMenu.bind(this)
        }, void 0, _react2.default.createElement(_InputText2.default, (0, _extends3.default)({
          ref: 'inputText',
          value: inputValue,
          placeholder: placeholder,
          onKeyDown: this.onInputKeyDown.bind(this),
          onChange: this.onInputChange.bind(this)
        }, inputTextProps)), _react2.default.createElement(
          _Button2.default,
          (0, _extends3.default)({ square: true, active: isMenuShow }, buttonProps),
          (0, _jsx3.default)(_MiFold2.default, {
            size: '18'
          })
        )),
        (0, _jsx3.default)(_reactOverlays.Overlay, {
          show: isMenuShow,
          onHide: this.closeMenu.bind(this),
          onExited: this.onMenuExited.bind(this),
          rootClose: true,
          placement: 'bottom',
          container: this,
          target: function target() {
            return (0, _reactDom.findDOMNode)(_this3);
          },
          transition: _SlideDown2.default
        }, void 0, filteredItems.length > 0 ? _react2.default.createElement(_Menu2.default, { ref: 'menu',
          controllable: true,
          eventTarget: function eventTarget() {
            return (0, _reactDom.findDOMNode)(_this3.refs.inputText.refs.input);
          },
          className: _InputSelect2.default.menu,
          menuItemTheme: menuItemTheme,
          onChange: this.onItemClick.bind(this),
          onFocusChange: this.onMenuFocusChange.bind(this),
          selectedValue: value,
          items: filteredItems,
          focusedIndex: focusedIndex }) : noResultsContent)
      );
    }
  }]);
  return InputSelect;
}(_react2.default.Component), _class2.propTypes = {
  items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    value: _react.PropTypes.any.isRequired,
    children: _react.PropTypes.node.isRequired,
    disabled: _react.PropTypes.bool
  })),
  value: _react.PropTypes.any.isRequired,
  onChange: _react.PropTypes.func.isRequired, // (value) => {}
  onInputChange: _react.PropTypes.func, // (e) => {}
  filterFunc: _react.PropTypes.func.isRequired, // (item, inputValue) => boolean, method to filter a single option
  valueRenderer: _react.PropTypes.func.isRequired, // (value) => inputValue, method to generate an inputValue from inputValue
  noResultsContent: _react.PropTypes.node, // placeholder displayed when there are no matching search results
  placeholder: _react.PropTypes.string,
  className: _react.PropTypes.string,
  inputTextProps: _react.PropTypes.object,
  buttonProps: _react.PropTypes.object,
  menuItemTheme: _react.PropTypes.object
}, _class2.defaultProps = {
  filterFunc: defaultFilterFunc,
  valueRenderer: defaultValueRenderer,
  noResultsContent: (0, _jsx3.default)(_Menu2.default, {
    className: _InputSelect2.default.menu,
    onChange: _emptyFunction2.default
  }, void 0, (0, _jsx3.default)(_MenuItem2.default, {
    value: '',
    disabled: true
  }, void 0, 'No results found'))
}, _temp2)) || _class;

exports.default = InputSelect;
module.exports = exports['default'];