'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _jsx2 = require('babel-runtime/helpers/jsx');

var _jsx3 = _interopRequireDefault(_jsx2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _InputText = require('./InputText');

var _InputText2 = _interopRequireDefault(_InputText);

var _InputTime = require('./InputTime');

var _InputTime2 = _interopRequireDefault(_InputTime);

var _Button = require('./Button');

var _Button2 = _interopRequireDefault(_Button);

var _PopoverOverlay = require('./PopoverOverlay');

var _PopoverOverlay2 = _interopRequireDefault(_PopoverOverlay);

var _InputDate = require('./InputDate');

var _InputDate2 = _interopRequireDefault(_InputDate);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _clampDate = require('./utils/clampDate');

var _clampDate2 = _interopRequireDefault(_clampDate);

var _InputDatetime = require('./styles/InputDatetime.css');

var _InputDatetime2 = _interopRequireDefault(_InputDatetime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InputDatetime = (0, _pureRenderDecorator2.default)(_class = (_temp = _class2 = function (_React$Component) {
  (0, _inherits3.default)(InputDatetime, _React$Component);

  function InputDatetime() {
    var _ref;

    (0, _classCallCheck3.default)(this, InputDatetime);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = InputDatetime.__proto__ || Object.getPrototypeOf(InputDatetime)).call.apply(_ref, [this].concat(args)));

    _this.state = { isShow: false };
    return _this;
  }

  (0, _createClass3.default)(InputDatetime, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      /* initial render */
      this.setCurrentValue(this.props.selectedValue);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      /* update from props */
      this.setCurrentValue(nextProps.selectedValue);
    }
  }, {
    key: 'onInputClick',
    value: function onInputClick() {
      this.props.onClick(); /* excute onClick from props*/
      this.setState({ isShow: !this.state.isShow });
      this.setCurrentValue(this.props.selectedValue); /* 上次的操作可能是 close 不是 submit，讓選擇歸零重新開始。 */
    }

    /**
    * Fire when <day> item click
    */

  }, {
    key: 'onChange',
    value: function onChange(e, value) {
      this.props.onChange(e, value); /* excute onChange from props*/
      this.setCurrentValue(value);
    }

    /**
    * Fire when 'ok' <Button> click
    */

  }, {
    key: 'onSubmit',
    value: function onSubmit(e) {
      this.props.onSubmit(e, this.state.currentValue); /* expect to get new proprs */
      this.close();
    }
  }, {
    key: 'onHourChange',
    value: function onHourChange(e, hour) {
      var currentValue = this.state.currentValue;


      this.setCurrentValue(currentValue.clone().set('hour', hour));
    }
  }, {
    key: 'onMinuteChange',
    value: function onMinuteChange(e, minute) {
      var currentValue = this.state.currentValue;


      this.setCurrentValue(currentValue.clone().set('minute', minute));
    }

    /**
    * setCurrentValue(datetime)
    * Important! Always set 'currentValue' state via this function. [single south of truth]
    *
    * @input (Date or moment object) datetime
    *
    */

  }, {
    key: 'setCurrentValue',
    value: function setCurrentValue(datetime) {
      var _props = this.props,
          utc = _props.utc,
          max = _props.max,
          min = _props.min;


      var currentValue = (0, _clampDate2.default)({
        currentValue: (0, _moment2.default)(datetime).utcOffset(utc), /* set timezone */
        max: (0, _moment2.default)(max).utcOffset(utc),
        min: (0, _moment2.default)(min).utcOffset(utc)
      });

      this.setState({
        currentValue: currentValue,
        hour: currentValue.format('HH'),
        minute: currentValue.format('mm')
      });
    }
  }, {
    key: 'subtractOneMonth',
    value: function subtractOneMonth() {
      var currentValue = this.state.currentValue;


      this.setCurrentValue(currentValue.clone().subtract(1, 'month'));
    }
  }, {
    key: 'addOneMonth',
    value: function addOneMonth() {
      var currentValue = this.state.currentValue;


      this.setCurrentValue(currentValue.clone().add(1, 'month'));
    }
  }, {
    key: 'close',
    value: function close() {
      this.setState({ isShow: false });
    }

    /**
    * renderTimePicker
    */

  }, {
    key: 'renderTimePicker',
    value: function renderTimePicker() {
      var _props2 = this.props,
          max = _props2.max,
          min = _props2.min;
      var _state = this.state,
          hour = _state.hour,
          minute = _state.minute,
          currentValue = _state.currentValue;


      max = (0, _moment2.default)(max);
      min = (0, _moment2.default)(min);

      var isUpperHourReach = max.isSame(currentValue, 'hour');
      var isLowerHourReach = min.isSame(currentValue, 'hour');

      var isUpperMinuteReach = max.isSame(currentValue, 'minute');
      var isLowerMinuteReach = min.isSame(currentValue, 'minute');

      return (0, _jsx3.default)('div', {
        className: _InputDatetime2.default.timePickerWrap
      }, void 0, (0, _jsx3.default)('div', {}, void 0, 'Time:'), (0, _jsx3.default)(_InputTime2.default, {
        maxHour: isUpperHourReach ? max.get('hour') : '23',
        minHour: isLowerHourReach ? min.get('hour') : '0',
        hour: hour,
        onHourChange: this.onHourChange.bind(this),
        maxMinute: isUpperMinuteReach ? max.get('minute') : '59',
        minMinute: isLowerMinuteReach ? min.get('minute') : '0',
        minute: minute,
        onMinuteChange: this.onMinuteChange.bind(this)
      }), (0, _jsx3.default)(_Button2.default, {
        onClick: this.onSubmit.bind(this)
      }, void 0, 'OK'));
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props3 = this.props,
          today = _props3.today,
          max = _props3.max,
          min = _props3.min,
          utc = _props3.utc,
          locale = _props3.locale,
          placeholder = _props3.placeholder,
          format = _props3.format,
          selectedValue = _props3.selectedValue,
          placement = _props3.placement,
          className = _props3.className,
          otherProps = (0, _objectWithoutProperties3.default)(_props3, ['today', 'max', 'min', 'utc', 'locale', 'placeholder', 'format', 'selectedValue', 'placement', 'className']);
      var currentValue = this.state.currentValue;


      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, otherProps, {
          className: (0, _classnames2.default)(_InputDatetime2.default.wrap, className)
        }),
        _react2.default.createElement(_InputText2.default, {
          ref: 'target',
          className: _InputDatetime2.default.input,
          placeholder: placeholder,
          value: (0, _moment2.default)(selectedValue).utcOffset(utc).format(format),
          onClick: this.onInputClick.bind(this),
          readOnly: true
        }),
        (0, _jsx3.default)(_PopoverOverlay2.default, {
          show: this.state.isShow,
          onHide: this.close.bind(this),
          rootClose: true,
          placement: placement,
          target: function target() {
            return (0, _reactDom.findDOMNode)(_this2.refs.target);
          },
          className: _InputDatetime2.default.calendarWrap
        }, void 0, (0, _jsx3.default)(_InputDate2.default, {
          selectedValue: currentValue,
          today: (0, _moment2.default)(today),
          max: (0, _moment2.default)(max).utcOffset(utc),
          min: (0, _moment2.default)(min).utcOffset(utc),
          onChange: this.onChange.bind(this),
          locale: locale
        }), this.renderTimePicker())
      );
    }
  }]);
  return InputDatetime;
}(_react2.default.Component), _class2.propTypes = {
  selectedValue: _react.PropTypes.object.isRequired, /* could be Date object or moment object, need momentify */
  today: _react.PropTypes.object.isRequired, /* could be Date object or moment object, need momentify */
  max: _react.PropTypes.object.isRequired, /* could be Date object or moment object, need momentify */
  min: _react.PropTypes.object.isRequired, /* could be Date object or moment object, need momentify */
  onSubmit: _react.PropTypes.func.isRequired,
  onChange: _react.PropTypes.func,
  onClick: _react.PropTypes.func,
  locale: _react.PropTypes.string,
  placeholder: _react.PropTypes.string,
  format: _react.PropTypes.string,
  placement: _react.PropTypes.string,
  utc: _react.PropTypes.number,
  className: _react.PropTypes.string
}, _class2.defaultProps = {
  today: new Date(), /* Today */
  max: new Date(), /* Today */
  min: new Date(-8640000000000000),
  onChange: function onChange() {},
  onClick: function onClick() {},
  locale: 'en',
  placeholder: '',
  format: 'YYYY-MM-DD HH:mm',
  placement: 'bottom',
  utc: 8
}, _temp)) || _class;

exports.default = InputDatetime;
module.exports = exports['default'];