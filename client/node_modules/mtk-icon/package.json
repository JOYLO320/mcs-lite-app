{
  "_args": [
    [
      {
        "raw": "mtk-icon@http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
        "scope": null,
        "escapedName": "mtk-icon",
        "name": "mtk-icon",
        "rawSpec": "http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
        "spec": "http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
        "type": "remote"
      },
      "/Users/blue-mtk/mtk/mcs-lite-view"
    ]
  ],
  "_from": "http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
  "_id": "mtk-icon@1.0.11",
  "_inCache": true,
  "_installable": true,
  "_location": "/mtk-icon",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mtk-icon@http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
    "scope": null,
    "escapedName": "mtk-icon",
    "name": "mtk-icon",
    "rawSpec": "http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
    "spec": "http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
  "_shasum": "073c701a35c1bf4957da49dd7a0bb8786abd6736",
  "_shrinkwrap": null,
  "_spec": "mtk-icon@http://bamboo.mediatek.inc/packages/mtk-icon/1.0.11.tgz",
  "_where": "/Users/blue-mtk/mtk/mcs-lite-view",
  "author": {
    "name": "Mediatek"
  },
  "bin": {
    "mtk-icon": "./bin/index.js"
  },
  "dependencies": {},
  "description": "mtk-icon",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-eslint": "^6.1.0",
    "babel-loader": "^6.2.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-lodash": "^3.2.0",
    "babel-plugin-react-transform": "1.1.x",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-polyfill": "^6.7.4",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.11.0",
    "babel-preset-stage-0": "^6.5.0",
    "babel-register": "^6.9.0",
    "cheerio": "^0.19.0",
    "commander": "^2.9.0",
    "css-loader": "^0.23.0",
    "eslint": "^1.8.0",
    "eslint-config-defaults": "^7.1.1",
    "eslint-plugin-react": "^3.6.3",
    "extract-text-webpack-plugin": "^0.9.1",
    "file-loader": "^0.8.4",
    "json-loader": "^0.5.4",
    "lodash": "^3.10.1",
    "parse-filepath": "^0.6.3",
    "postcss": "^5.0.12",
    "postcss-loader": "^0.8.0",
    "react": "^15.1.0",
    "react-addons-shallow-compare": "^15.1.0",
    "react-addons-test-utils": "^15.1.0",
    "react-hot-loader": "^3.0.0-beta.2",
    "recompose": "^0.20.0",
    "rimraf": "^2.4.4",
    "simulant": "^0.1.5",
    "style-loader": "^0.13.0",
    "stylelint": "^3.2.0",
    "stylelint-config-suitcss": "^2.0.0",
    "uppercamelcase": "^1.1.0",
    "url-loader": "^0.5.6",
    "webpack": "^1.12.6"
  },
  "engineStrict": true,
  "engines": {
    "node": ">= 4.2.2",
    "npm": ">= 2.14.7"
  },
  "keywords": [
    "mtk",
    "svg",
    "icon"
  ],
  "license": "no",
  "main": "lib/index.js",
  "name": "mtk-icon",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0",
    "recompose": "0.x"
  },
  "private": true,
  "readme": "# MTK ICON\n\n## For Designer\n\n* Put .svg file into `./svg/`.\n\n## For Developer\n\n### To Build components\n\n```sh\nnpm i\nnpm run build\n```\n\n### To Build the Demo Page\n\n```sh\ncd example\nnpm i\nnpm run build\n```\n\nIt will generate all static files into `example/build` folder. Also, you can use `npm run start` directly which will first `npm run build` then start a http server listening at `localhost:8080`.\n\n## Inspired by\n\n* [react-icons](https://github.com/gorangajic/react-icons)\n* [remove-svg-properties](https://github.com/ferdinandtorggler/remove-svg-properties)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "ssh://git@172.21.90.117:7999/mtkenv/mtk-icon.git"
  },
  "scripts": {
    "build": "npm run build:src",
    "build:lib": "NODE_ENV=production babel src --ignore src/__tests__/ --out-dir lib",
    "build:src": "npm run generateSVGComponents && npm run generateComponentsEntry",
    "clean": "rimraf ./src/* ./lib",
    "eslint": "eslint ./",
    "generateComponentsEntry": "babel-node ./bin/index.js generateComponentsEntry ./src/*.js --out-file ./src/index.js",
    "generateSVGComponents": "babel-node ./bin/index.js generateSVGComponents ./svg/**/*.svg --out-dir ./src --template ./configs/rccTemplate.default.js --attrBlacklist ./configs/attrBlacklist.default.js",
    "lint": "npm run stylelint && npm run eslint ",
    "postbuild": "npm run build:lib",
    "prebuild": "npm run clean",
    "stylelint": "babel-node node_modules/.bin/stylelint 'example/styles/*.css'",
    "test": "echo 'TODO: test'"
  },
  "version": "1.0.11"
}
