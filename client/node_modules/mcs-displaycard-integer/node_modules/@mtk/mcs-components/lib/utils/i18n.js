'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _i18nextClient = require('i18next-client');

var _i18nextClient2 = _interopRequireDefault(_i18nextClient);

var _configsI18nextJson = require('../configs/i18next.json');

var _configsI18nextJson2 = _interopRequireDefault(_configsI18nextJson);

var _lodashAssign = require('lodash.assign');

var _lodashAssign2 = _interopRequireDefault(_lodashAssign);

/**
* 設定 i18next
*
* @input {object} option
{
  "lng": "預設語言",
  "fallbackLng": "如果沒有抓到剛語言的檔案，則改成這個語言",
  "supportedLngs": [ "en", "zh-TW", "zh-CN" ],
  "preload": [ "en", "zh-TW", "zh-CN" ],
  "debug": false,
  "useLocalStorage": true,
  "localStorageExpirationTime": 86400000
}
*
* Reference: http://i18next.com/node/pages/doc_init.html
*
* @output {function} translate
*
* @author Michael Hsu
*/

var setup = function setup(option) {
  // merge config option
  option = (0, _lodashAssign2['default'])(_configsI18nextJson2['default'], option);

  // tree: lng -> namespace -> key -> nested key
  option.resStore = {};
  option.supportedLngs.forEach(function (language) {
    option.resStore[language] = { translation: require('../locales/' + language + '.json') };
  });

  return new Promise(function (resolve, reject) {
    _i18nextClient2['default'].init(option);
    resolve(_i18nextClient2['default']);
  });
};
exports.setup = setup;