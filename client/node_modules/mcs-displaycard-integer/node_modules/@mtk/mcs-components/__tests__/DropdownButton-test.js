jest.dontMock('../src/DropdownButton');

describe('DropdownButton', () => {
  let React;
  let TestUtils;
  let DropdownButton;
  beforeEach(()=> {
    React = require('react/addons');
    TestUtils = React.addons.TestUtils;
    DropdownButton = require('../src/DropdownButton');
  });

  it('should render the title', () => {
    // String title
    const dropdownButton = TestUtils.renderIntoDocument(
      <DropdownButton title="Dropdown Button" />
    );
    expect(dropdownButton.refs.title.getDOMNode().textContent).toEqual('Dropdown Button');

    // Component title
    class MockComponent extends React.Component {
      render() {
        return <div />;
      }
    }
    const btnWithComponentTitle = TestUtils.renderIntoDocument(
      <DropdownButton title={<MockComponent/>}/>
    );

    const title = TestUtils.findRenderedComponentWithType(btnWithComponentTitle.refs.title, MockComponent);
    expect(TestUtils.isCompositeComponent(title)).toEqual(true);
  });

  it('should open on click', () => {
    const dropdownButton = TestUtils.renderIntoDocument(<DropdownButton />);

    // default to false
    expect(dropdownButton.state.isOpen).toBe(false);

    // open after click
    const title = dropdownButton.refs.title;
    TestUtils.Simulate.click(title);
    expect(dropdownButton.state.isOpen).toBe(true);

  });

  describe('when open', () => {
    let dropdownButton;
    let title;
    beforeEach(() => {
      dropdownButton = TestUtils.renderIntoDocument(<DropdownButton />);
      title = dropdownButton.refs.title;
      TestUtils.Simulate.click(title);
    });

    it('should close on click', () => {
      TestUtils.Simulate.click(title);
      expect(dropdownButton.state.isOpen).toBe(false);
    });

    it('should close on click at document', () => {
      let evt = document.createEvent('HTMLEvents');
      evt.initEvent('click', true, true);
      document.dispatchEvent(evt);
      expect(dropdownButton.state.isOpen).toBe(false);
    });

    it('should close on keyup at document', () => {
      let evt = document.createEvent('HTMLEvents');
      evt.initEvent('keyup', true, true);
      document.dispatchEvent(evt);
      expect(dropdownButton.state.isOpen).toBe(false);
    });

  });

});
