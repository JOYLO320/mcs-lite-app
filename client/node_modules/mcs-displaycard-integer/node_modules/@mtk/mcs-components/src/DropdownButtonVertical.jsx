import React from 'react';
import {PropTypes} from 'react';
import EventListener from 'fbjs/lib/EventListener';
import Radium from 'radium';
import Clickable from './internal/Clickable';
import m from './utils/styleMerger';
import NavVertical from './NavVertical';

class DropdownButton extends Clickable {
  constructor(props) {
    super(props);
    this.state = this.state || {};
    this.state.isOpen = false;
  }

  render() {
    let {
      style: menuStyle,
      href,
      buttonStyle,
      activeStyle,
      title,
      children,
      id,
      ...props
    } = this.props;

    return (
      <li id={this.props.id}
        onClick={e => this._handleClick(e)}
        style={m(
        styles.item,
        (this.state.isHover || this.state.isOpen) && activeStyle,
        menuStyle
      )}>
        <span
          ref="title"
          style={buttonStyle}>
          {title}
          <i className="fa fa-sort-down" style={[
            styles.dropDownIcon,
            this.state.isOpen ? styles.dropDownIconOpen : styles.dropDownIconClose
          ]}/>
        </span>
        <NavVertical dropdownMenu style={m(
          styles.tabletsNav,
          this.state.isOpen ? styles.tabletsNavShow : styles.tabletsNavHide
        )}>
          {
            React.Children.map(children, (child, index) => {
              return React.cloneElement(child, {
                key: index,
                style: child.props.style
              });
            })
          }
        </NavVertical>
      </li>
    );
  }

  _handleClick(e) {
    e.preventDefault();
    if (this.state.isOpen) {
      return this._hide();
    }

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    this.setState({isOpen: true});
    this._onDocumentClickListener = EventListener.listen(document, 'click', this._hide.bind(this));
    this._onDocumentKeyupListener = EventListener.listen(document, 'keyup', this._hide.bind(this));
  }

  _hide() {
    this.setState({isOpen: false});

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    if (this._onDocumentKeyupListener) {
      this._onDocumentKeyupListener.remove();
    }
  }
}

DropdownButton.propTypes = {
  buttonStyle: PropTypes.object,
  activeStyle: PropTypes.object,
  title: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.object
    ])
};
DropdownButton.defaultProps = {};

export default Radium(DropdownButton);

const styles = {
  item: {
    width: '100%',
    lineHeight: '50px',
    marginTop: 0,
    marginBottom: 0,
    backgroundColor: '#00a1de',
    color: '#fff',
    textAlign: 'center',
    cursor: 'pointer',
    listStyleType: 'none'
  },
  tabletsNav: {
    display: 'block',
    transition: 'margin .4s ease-out'
  },
  tabletsNavShow: {
    marginTop: '0px'
  },
  tabletsNavHide: {
    marginTop: '-800px'
  },
  dropDownIcon: {
    position: 'relative',
    marginRight: 27,
    top: 13,
    fontSize: 15,
    float: 'right',
    transition: 'transform .3s ease-out'
  },
  dropDownIconOpen: {
    top: 20,
    transform: 'rotate(-180deg)'
  },
  dropDownIconClose: {
    top: 13,
    transform: 'rotate(0deg)'
  }
};
