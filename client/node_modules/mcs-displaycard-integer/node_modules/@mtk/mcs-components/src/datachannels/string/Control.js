import { default as React, PropTypes } from 'react';
import { compose, pure, setPropTypes, defaultProps, withAttachedProps, mapProps, withState } from 'recompose';
import { default as InputTextarea } from 'mtk-ui/lib/InputTextarea';
import { default as Button } from 'mtk-ui/lib/Button';
import { MiDelete } from 'mtk-icon';
import { default as elementStyle } from '../common/card/styles/base.css';
import { default as styles } from './styles/main.css';
import { default as c } from 'classnames';
import { default as emptyFunction } from 'fbjs/lib/emptyFunction';

const control = ({ defaultValue, value, onDelete, onClick, onChange, displayType, placeholder }) => {
  return (
    <div className={c(elementStyle.base, elementStyle[displayType], styles.base )}>
      <div style={{ height: 165, marginTop: 23 }}>
        <InputTextarea
          rows="8"
          value={value}
          onChange={onChange}
          defaultValue={defaultValue}
          placeholder={placeholder}
          className={styles.controlTextarea} />
        <div className={styles.nav}>
          <a onDelete={onDelete} className={styles.clear}>
            <MiDelete className={styles.MiDelete} />
            <span>Clear</span>
          </a>
          <Button onClick={onClick}>OK</Button>
        </div>
      </div>
    </div>
  );
};

export const propTypes = {
  displayType: PropTypes.oneOf(['none', 'preview', 'embeded']),
  unit: PropTypes.string,
  value: PropTypes.string,
  channelType: PropTypes.oneOf(['String', 'Hex']),
  defaultValue: PropTypes.string,
};

export default compose(
  defaultProps({
    channelType: 'String',
    displayType: 'none',
  }),
  withState('value', 'setValue', (props) => props.defaultValue),
  setPropTypes(propTypes),
  pure,
  withAttachedProps((getProps) => ({
    placeholder: getProps().channelType === 'Hex' ? 'Input the hexadecimal value, only 0-9 or A-F.' : 'Input the String.',
    onClick: emptyFunction,
    onChange: (e) => getProps().setValue(e.target.value),
  })),
  mapProps( props => ({
    ...props,
    value: props.value,
  })),
)(control);
