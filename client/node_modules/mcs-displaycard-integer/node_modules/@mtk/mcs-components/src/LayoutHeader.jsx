import { default as React, PropTypes } from 'react';
import Radium from 'radium';
import ReactCookie from 'react-cookie';
import { default as UserVoice } from './utils/UserVoice';
import { default as UserReport } from './utils/UserReport';
import * as I18n from './utils/i18n';
import m from './utils/styleMerger';
import getLocale from './utils/getLocale.js';

import NavItem from './NavItem';
import Nav from './Nav';
import DropdownButton from './DropdownButton';

import resourcesConfig from './configs/resources';
import { default as userVoiceConfig } from './configs/userVoice.json';
import { default as userReportConfig } from './configs/userReport.json';
import logo from './img/web_logo.png';

class LayoutHeader extends React.Component {
  static propTypes = {
    nickname: PropTypes.string,
    imageUrl: PropTypes.string,
    numberOfCards: PropTypes.number,
    logoutFn: PropTypes.func,
    isManager: PropTypes.bool,
  }

  static defaultProps = {
    isManager: false,
  }

  constructor(props) {
    super(props);
    this.state = {
      isChina: false,
    };
  }

  componentWillMount() {
    // 取得現在網址代表的語言
    let i18nPrefix = getLocale(window.location.href);

    let basePath = `${
        window.location.origin + '/'
      }${
        resourcesConfig.base + '/'
      }${
        i18nPrefix ? i18nPrefix + '/' : ''
      }${
        resourcesConfig.version + '/'
    }`;

    let rootPath = `${
        window.location.origin + '/'
      }${
        i18nPrefix ? i18nPrefix + '/' : ''
    }`;

    const isChina = /\.cn$/.test(window.location.hostname);
    if (isChina) {
      // UserReport 設定
      this.userReport = new UserReport({
        API_KEY: require('./configs/userReport.json').API_KEY,
      }).setup();
      this.setState({ isChina: true });
    } else {
      // UserVoice 設定
      this.userVoice = new UserVoice({
        target: '#feedbackUserVoice',
        locale: i18nPrefix,
        API_KEY: userVoiceConfig.API_KEY,
        API_KEY: require('./configs/userVoice.json').API_KEY,
      }).setup();
    }

    // i18n 設定
    I18n.setup({
      lng: i18nPrefix
    })
    .then((i18n) => {
      this.setState({ i18n: i18n.t });
    })

    .catch((error) => {
      console.log(error);
    });

    this.setState({
      resourcesList: resourcesConfig.resourcesList,
      helpList: resourcesConfig.helpList,
      i18nPrefix: i18nPrefix,
      basePath: this._adjustPathLocale(basePath),
      rootPath: this._adjustPathLocale(rootPath),
      v2consolePath: this._adjustPathLocale(`/v2console/${i18nPrefix}`),
      isMobileMode: this.props.numberOfCards <= 2,
      i18n: function(text) { return text; }
    });
  }

  componentWillReceiveProps(nextProps) {
    this.setState({
      isMobileMode: nextProps.numberOfCards <= 2
    });
  }

  render() {
    const {
      nickname,
      imageUrl,
      numberOfCards,
      logoutFn,
      isManager,
      ...otherProps
    } = this.props;

    return (
      <header {...otherProps} style={styles.header}>
        <div style={styles.mask}></div>
        <div style={[
          styles.container,
          {width: 318 * numberOfCards }]}>
          <Nav>
            <NavItem href= { this.state.v2consolePath }
              linkStyle={styles.logoLink}
            >
              <img
                src={logo}
                alt="logo"
                style={styles.logo}
              />
            </NavItem>
            {
              this.state.isChina && (
                <NavItem href="http://ns.csip.cn/"
                  target="_blank"
                  linkStyle={styles.logoLink}
                >
                  <img
                    src={require('./img/csip_logo.png')}
                    alt="csip"
                    style={m(
                      styles.logo,
                      { width: 105 },
                    )}
                  />
                </NavItem>
              )
            }
            <Nav>
              <DropdownButton
                buttonStyle={m(
                  styles.link,
                  this._isMenuActive('developmentList') && styles.activeStyle)}
                activeStyle={styles.activeStyle}
                title={
                  <span>
                    <i className="fa fa-wrench" style={styles.prefixIcon}/>
                    { !this.state.isMobileMode && this.state.i18n('Development') }
                  </span>
                }
              >
                <NavItem
                  href={`${this.state.v2consolePath}/development`}
                  style={[
                    styles.menuItem,
                    this._isItemActive('development') ? styles.menuItemActive : {}]}
                  linkStyle={styles.menuLink}
                  activeStyle={styles.menuItemActive}
                >
                  { this.state.i18n('Prototype') }
                </NavItem>
                <NavItem
                  href={`${this.state.v2consolePath}/testdevices`}
                  style={[
                    styles.menuItem,
                    this._isItemActive('testdevices') ? styles.menuItemActive : {},
                    { borderRadius: '0 0 4px 4px' }]}
                  linkStyle={styles.menuLink}
                  activeStyle={styles.menuItemActive}
                >
                  { this.state.i18n('Test devices') }
                </NavItem>
              </DropdownButton>
              </Nav>
            <NavItem
              href={`${this.state.v2consolePath}/management`}
              style={this._isItemActive('management') ? styles.activeStyle : {}}
              linkStyle={m(
                styles.link,
                this._isItemActive('management') && styles.activeStyle)}
              activeStyle={styles.activeStyle}
              activeLinkStyle={styles.activeStyle}
            >
              <i className="fa fa-clipboard" style={styles.prefixIcon}/>
              { !this.state.isMobileMode && this.state.i18n('Management') }
            </NavItem>
            {
              isManager && (
                <NavItem
                  href={`/analytics/user${this.state.i18nPrefix && '?locale=' + this.state.i18nPrefix}`}
                  style={this._isItemActive('analytics') ? styles.activeStyle : {}}
                  linkStyle={m(
                    styles.link,
                    this._isItemActive('analytics') && styles.activeStyle)}
                  activeStyle={styles.activeStyle}
                  activeLinkStyle={styles.activeStyle}
                >
                  <i className="fa fa-area-chart" style={styles.prefixIcon}/>
                  { !this.state.isMobileMode && this.state.i18n('Analytics') }
                </NavItem>
              )
            }
          </Nav>
          <Nav style={{float: 'right'}}>
            <DropdownButton
              buttonStyle={m(
                styles.link,
                this._isMenuActive('resourcesList') && styles.activeStyle)}
              activeStyle={styles.activeStyle}
              title={<span>
                <i className="fa fa-inbox" style={styles.prefixIcon}/>
                { !this.state.isMobileMode && this.state.i18n('Resources') }
              </span>}
            >
              {
                this.state.resourcesList.map((entry, index, array) => {
                  return (
                    <NavItem key={index} href={entry.path.startsWith('http') ? entry.path : this.state.basePath + entry.path}
                      style={[
                        styles.menuItem,
                        this._isItemActive(entry.path) ? styles.menuItemActive : {},
                        array.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {}]}
                      linkStyle={styles.menuLink}
                      activeStyle={m(
                        styles.menuItemActive,
                        array.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {})}
                    >
                      { this.state.i18n(entry.name) }
                    </NavItem>
                  );
                })
              }
            </DropdownButton>
            <DropdownButton
              id='feedbackUserVoice'
              buttonStyle={m(
                styles.link,
                this._isMenuActive('helpList') && styles.activeStyle)}
              activeStyle={styles.activeStyle}
              title={<span>
                <i className="fa fa-comments-o" style={styles.prefixIcon}/>
                { !this.state.isMobileMode && this.state.i18n('Help') }
              </span>}
            >
              {
                this.state.helpList.map((entry, index) => {
                  return (
                    <NavItem key={index} href={`${this.state.basePath}${entry.path}`}
                      style={[
                        styles.menuItem,
                        this._isItemActive(entry.path) ? styles.menuItemActive : {}
                      ]}
                      linkStyle={styles.menuLink}
                      activeStyle={styles.menuItemActive}
                    >
                      { this.state.i18n(entry.name) }
                    </NavItem>
                  );
                })
              }
              <NavItem key="Forum"
                href="http://labs.mediatek.com/forums/forums/show/48.page"
                target="_blank"
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={styles.menuItemActive}
              >
                { this.state.i18n('Forum') }
              </NavItem>

              <NavItem key="Feedback"
                onClick={::this._handleFeedbackClick}
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={m(
                  styles.menuItemActive,
                  { borderRadius: '0 0 4px 4px' })}
              >
                { this.state.i18n('Feedback') }
              </NavItem>
            </DropdownButton>
            <DropdownButton
              buttonStyle={styles.link}
              activeStyle={styles.activeStyle}
              title={<span>
                <img src={imageUrl} style={styles.userImage} />
              </span>}
            >
              <NavItem key="Profile"
                href={`${this.state.v2consolePath}/console/profile`}
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={styles.menuItemActive}>
                { this.state.i18n('Profile') }
              </NavItem>
              <NavItem key="TermsOfUse"
                href={`${this.state.basePath}terms_of_use/`}
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={styles.menuItemActive}>
                { this.state.i18n('Terms of use') }
              </NavItem>
              <NavItem key="SignOut"
                onClick={e => logoutFn()}
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={m(
                  styles.menuItemActive,
                  { borderRadius: '0 0 4px 4px' })}
              >
                { this.state.i18n('Sign out') }
              </NavItem>
            </DropdownButton>
          </Nav>
        </div>
      </header>
    );
  }

  _handleFeedbackClick() {
    const isChina = /\.cn$/.test(window.location.hostname);

    isChina ? this.userReport.show() : this.userVoice.show();
  }

  /**
  * Menu (Resources / Help) 是否 active
  *
  * @input  {string} listName (resourcesList / helpList)
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isMenuActive(listName) {
    switch (listName) {
      case 'developmentList':
        return (/development/.test(window.location.pathname)) || (/testdevices/.test(window.location.pathname));
      case 'resourcesList':
        return (/resources/.test(window.location.pathname)) && !(/faq/.test(window.location.pathname));
      case 'helpList':
        return (/resources/.test(window.location.pathname)) && (/faq/.test(window.location.pathname));
    }
  }

  /**
  * Item (Resources / Help) 是否 active
  *
  * @input  {string} regPath (introduction / key_conecpt ...)
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isItemActive(regPath) {
    return new RegExp(regPath).test(window.location.pathname);
  }

  /**
  * 處理 basePath 的調整，刪除不需要的 locale
  *
  * @input  (string) basePath
  * @output (string) adjuested basePath
  *
  * Example: 'mcs.mediatek.cn/zh-CN' -> 'mcs.mediatek.cn'
  * Example: 'mcs.mediatek.com/en' -> 'mcs.mediatek.com'
  *
  * @author Michael Hsu
  */

  _adjustPathLocale(path) {
    let i18nHost = /\.((cn)|(com)|(io)|(inc))$/.exec(window.location.hostname);
    i18nHost = i18nHost && i18nHost[0];

    switch (i18nHost){
      case '.cn':
        return path.replace('/zh-CN', '');
      default:
        return path.replace('/en', '');
    }
  }

}

export default Radium(LayoutHeader);

LayoutHeader.propTypes = {
  nickname: React.PropTypes.string,
  imageUrl: React.PropTypes.string,
  numberOfCards: React.PropTypes.number
};
LayoutHeader.defaultProps = {
  nickname: 'MCS User',
  numberOfCards: 3 // 預設卡片數量，一般螢幕為三張
};

const styles = {
  header: {
    width: '100%',
    height: 50,
    background: '#00a1de',
    boxShadow: '1px 2px 1px 0 rgba(0,0,0,0.1), 0 0 0 rgba(0,0,0,0.1)',
    position: 'fixed',
    zIndex: 999,
    fontSize: 13,
    userSelect: 'none'
  },
  mask: {
    position: 'absolute',
    width: '50%',
    backgroundColor: '#00a1de',
    height: 49,
    zIndex: 1004,
    right: 0
  },
  container: {
    background: '#00a1de',
    margin: '0 auto',
    padding: '0px 0px 0 3px',
    position: 'relative'
  },
  item: {
    marginLeft: '-0.32em'
  },
  link: {
    lineHeight: '50px',
    color: '#fff',
    position: 'relative',
    padding: '19px 12px 17px 12px',
    backgroundColor: '#00a1de',
    zIndex: 1004
  },
  logoLink: {
    lineHeight: '50px',
    padding: '18px 5px',
    marginRight: 15
  },
  logo: {
    width: 120,
    verticalAlign: 'middle'
  },
  activeStyle: {
    backgroundColor: '#1995cc'
  },
  menuLink: {
    display: 'block',
    clear: 'both',
    fontWeight: '400',
    padding: '10px 20px',
    color: '#fff'
  },
  menuItem: {
    width: '100%',
    height: '40px',
    textAlign: 'left'
  },
  menuItemActive: {
    backgroundColor: '#0c86bc'
  },
  prefixIcon: {
    position: 'relative',
    marginLeft: 5,
    marginRight: 5,
    fontSize: 13
  },
  navbar: {
    position: 'relative',
    marginLeft: 0,
    marginRight: 0,
    fontSize: 25,
    top: 8
  },
  userImage: {
    width: 29,
    height: 29,
    borderRadius: '100%',
    border: '1px solid #d1d3d4',
    padding: 1,
    background: '#fff',
    verticalAlign: 'middle'
  }
};
