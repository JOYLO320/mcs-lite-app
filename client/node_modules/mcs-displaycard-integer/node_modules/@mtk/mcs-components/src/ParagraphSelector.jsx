import React from 'react';
import Radium from 'radium';
import ButtonGroup from './ButtonGroup';
import EventListener from 'fbjs/lib/EventListener';
import * as SectionHelper from './utils/sectionHelper.js';
import * as I18n from './utils/i18n';
import getLocale from './utils/getLocale.js';

class ParagraphSelector extends React.Component {
  constructor(props) {
    super(props);
    this.state = this.state || {};
  }

  componentWillMount() {
    // 取得現在網址代表的語言
    let i18nPrefix = getLocale(window.location.href);

    // i18n 設定
    I18n.setup({
      lng: i18nPrefix
    })
    .then((i18n) => {
      this.setState({ i18n: i18n.t });
    })

    .catch((error) => {
      console.log(error);
    });

    this.setState({
      isOpen: false,
      sectionList: [],
      i18n (text) {return text; }
    });
  }

  componentDidMount() {
    const scopeClassName = this.props.scopeClassName;

    this.setState({
      sectionList: SectionHelper.getDynamicSection(scopeClassName)
    });
  }

  render() {
    let {
      style: customizedStyle,
      offset,
      ...otherProps
    } = this.props;

    return (
      <div {...otherProps} style={customizedStyle}>
        <ButtonGroup
          kind='primary'
          leftTitle={this.state.i18n('Select the paragraph')}
          rightTitle={<i className='fa fa-angle-down'/>}
          onClick={e => this._handleClick(e)}>
        </ButtonGroup>
        <ul style={[
          styles.dropdownMenu,
          this.state.isOpen ? {display: 'block'} : {display: 'none'}
        ]}>
          {
            this.state.sectionList.map((entry, index) => {
              return (
                <li key={index}
                  style={styles.dropdownList}
                  onClick={e => SectionHelper.scrollTo({ index, element: entry.element, offset })}>
                  {entry.innerText}
                </li>
              );
            })
          }
        </ul>
      </div>
    );
  }

  _handleClick(e) {
    e.preventDefault();
    if (this.state.isOpen) {
      return this._hide();
    }

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    this.setState({isOpen: true});
    this._onDocumentClickListener = EventListener.listen(document, 'click', this._hide.bind(this));
    this._onDocumentKeyupListener = EventListener.listen(document, 'keyup', this._hide.bind(this));
  }

  _hide() {
    this.setState({isOpen: false});

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    if (this._onDocumentKeyupListener) {
      this._onDocumentKeyupListener.remove();
    }
  }

}

export default Radium(ParagraphSelector);

ParagraphSelector.propTypes = {
  scopeClassName: React.PropTypes.string,
  sensitive: React.PropTypes.number,
  offset: React.PropTypes.number
};
ParagraphSelector.defaultProps = {
  scopeClassName: 'resource',
  sensitive: 5, // 觸發敏感度微調。
  offset: 0 // 保留 Header 高度
};

const styles = {
  dropdownMenu: {
    position: 'absolute',
    border: '1px solid rgba(0,0,0,.15)',
    borderRadius: 4,
    boxShadow: '0 6px 12px rgba(0,0,0,.175)',
    backgroundClip: 'padding-box',
    backgroundColor: '#fff',
    textAlign: 'left',
    listStyle: 'none',
    minWidth: 160,
    padding: '10px 0px',
    margin: '2px 0 0',
    right: 0
  },
  dropdownList: {
    lineHeight: '20px',
    fontSize: 14,
    padding: '3px 20px',
    whiteSpace: 'nowrap',
    cursor: 'pointer',
    ':hover': {
      color: '#fafafa',
      backgroundColor: '#00A1DE'
    }
  },
  dropdownListActive: {
    color: '#fafafa',
    backgroundColor: '#00A1DE'
  }
};
