var path = require('path');
var webpack = require('webpack');
var autoprefixer = require('autoprefixer');
var inputStyle = require('postcss-input-style');

var babelLoaderQuery = {
  'plugins': ['react-transform'],
  'extra': {
    'react-transform': {
      'transforms': [{
        'transform': 'react-transform-hmr',
        'imports': ['react'],
        'locals': ['module'],
      }, {
        'transform': 'react-transform-catch-errors',
        'imports': ['react', 'redbox-react'],
      }],
    },
  },
};

var STYLUS_LOADER = [
  'style',
  'css',
  'postcss',
  'stylus?' + JSON.stringify({paths: path.resolve(__dirname, '../node_modules/bootstrap-styl/')})
];
var CSS_LOADER = [
  'style',
  'css?modules&importLoaders=1&localIdentName=[name]__[local]___[hash:base64:5]',
  'postcss',
];

var entry = ['./entry.js', 'webpack-hot-middleware/client'];

module.exports = {
  context: path.resolve(__dirname),
  entry: entry,
  output: {
    path: path.resolve(__dirname, 'build'),
    filename: 'bundle.js',
    publicPath: '/'
  },
  module: {
    loaders: [
      {
        test: /\.js(x)?$/,
        exclude: /node_modules/,
        loader: 'babel',
        query: babelLoaderQuery,
      },
      // { test: /\.jsx?$/, exclude: /node_modules/, loaders: ['react-hot', 'babel-loader?optional=es7.objectRestSpread'] },
      { test: /\.styl$/, loaders:  STYLUS_LOADER },
      { test: /\.css$/, loaders:  CSS_LOADER },
      { test: /\.(png|jpg)$/, loader: 'url-loader?limit=10000' },
      { test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/, loader: 'url-loader?limit=10000&minetype=application/font-woff' },
      { test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/, loader: 'file-loader' },
      { test: /\.json$/, loaders: ['json-loader'] },
    ]
  },
  resolve: {
    extensions: ['', '.js', '.jsx'],
    alias: {
      'mcs-components': path.resolve(__dirname, '../src')
    }
  },
  devtool: 'eval-source-map',
  devServer: {
    port: 8000,
    host: 'localhost',
    contentBase: './example',
    hot: true,
    inline: true,
    historyApiFallback: true,
    stats: { colors: true }
  },
  plugins: [
    new webpack.EnvironmentPlugin('NODE_ENV'),
    new webpack.EnvironmentPlugin('DOMAIN_ENV'),
  ],
  postcss: function () {
    return {
      defaults: [autoprefixer({ browsers: ["> 1%"] }), inputStyle]
    };
  }
};
