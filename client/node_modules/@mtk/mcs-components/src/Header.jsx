import React from 'react';
import Radium from 'radium';
import ReactCookie from 'react-cookie';
import { default as UserVoice } from './utils/UserVoice';
import { default as UserReport } from './utils/UserReport';
import * as I18n from './utils/i18n';
import m from './utils/styleMerger';
import getLocale from './utils/getLocale.js';

import NavItem from './NavItem';
import Nav from './Nav';
import DropdownButton from './DropdownButton';
import DropdownButtonVertical from './DropdownButtonVertical';

import resourcesConfig from './configs/resources';
import languagesConfig from './configs/languages.json';
import { default as userVoiceConfig } from './configs/userVoice.json';
import { default as userReportConfig } from './configs/userReport.json';
import logo from './img/web_logo.png';

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      isChina: false,
    };
  }

  componentWillMount() {
    // 取得現在網址代表的語言
    let i18nPrefix = getLocale(window.location.href);

    let basePath = `${
        window.location.origin + '/'
      }${
        resourcesConfig.base + '/'
      }${
        i18nPrefix ? i18nPrefix + '/' : ''
      }${
        resourcesConfig.version + '/'
    }`;

    let rootPath = `${
        window.location.origin + '/'
      }${
        i18nPrefix ? i18nPrefix + '/' : ''
    }`;

    const isChina = /\.cn$/.test(window.location.hostname);
    if (isChina) {
      // UserReport 設定
      this.userReport = new UserReport({
        API_KEY: require('./configs/userReport.json').API_KEY,
      }).setup();
      this.setState({ isChina: true });
    } else {
      // UserVoice 設定
      this.userVoice = new UserVoice({
        target: '#feedbackUserVoice',
        locale: i18nPrefix,
        API_KEY: userVoiceConfig.API_KEY,
        API_KEY: require('./configs/userVoice.json').API_KEY,
      }).setup();
    }

    // 以 cookie 'token' 來判斷是否為登入狀態。
    let isLogin = ReactCookie.load('token') ? true : false;

    // i18n 設定
    I18n.setup({
      lng: i18nPrefix
    })
    .then((i18n) => {
      this.setState({ i18n: i18n.t });
    })

    .catch((error) => {
      console.log(error);
    });

    // Media Query
    let mql = window.matchMedia('(max-width: 767px)');
    mql.addListener(this._handleMediaQueryChange.bind(this));

    this.setState({
      resourcesList: resourcesConfig.resourcesList,
      helpList: resourcesConfig.helpList,
      languageList: languagesConfig.langhageList,
      i18nPrefix: i18nPrefix,
      currentLanguage: this._getCurrentLanguage(i18nPrefix),
      basePath: this._adjustPathLocale(basePath),
      rootPath: this._adjustPathLocale(rootPath),
      v2consolePath: this._adjustPathLocale(`/v2console/${i18nPrefix}`),
      isLogin: isLogin,
      isMobileMode: mql.matches ? true : false,
      isNavbarClicked: false,
      i18n: function(text) { return text; }
    });
  }

  render() {
    return (
      <header style={styles.header}>
        <div style={[
          styles.container,
          this.state.isMobileMode && {boxShadow: '1px 2px 1px 0 rgba(0,0,0,0.1), 0 0 0 rgba(0,0,0,0.1)'}]}>
          <Nav>
            <NavItem href= { this.state.rootPath }
              linkStyle={styles.logoLink}
            >
              <img
                src={logo}
                alt="logo"
                style={styles.logo}
              />
            </NavItem>
            {
              this.state.isChina && (
                <NavItem href="http://ns.csip.cn/"
                  target="_blank"
                  linkStyle={styles.logoLink}
                >
                  <img
                    src={require('./img/csip_logo.png')}
                    alt="csip"
                    style={m(
                      styles.logo,
                      { width: 105 },
                    )}
                  />
                </NavItem>
              )
            }
          </Nav>
          <Nav style={m(
            this.state.isMobileMode && {display: 'none'},
            {float: 'right'})}>
            <DropdownButton
              buttonStyle={m(
                styles.link,
                this._isMenuActive('resourcesList') && styles.activeStyle)}
              activeStyle={styles.activeStyle}
              title={<span>
                <i className="fa fa-inbox" style={styles.prefixIcon}/>
                { this.state.i18n('Resources') }
              </span>}
            >
              {
                this.state.resourcesList.map((entry, index, array) => {
                  return (
                    <NavItem key={index} href={entry.path.startsWith('http') ? entry.path : this.state.basePath + entry.path}
                      style={[
                        styles.menuItem,
                        this._isItemActive(entry.path) ? styles.menuItemActive : {},
                        array.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {}]}
                      linkStyle={styles.menuLink}
                      activeStyle={m(
                        styles.menuItemActive,
                        array.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {})}
                    >
                      { this.state.i18n(entry.name) }
                    </NavItem>
                  );
                })
              }
            </DropdownButton>
            <DropdownButton
              id={!this.state.isMobileMode && 'feedbackUserVoice' }
              buttonStyle={m(
                styles.link,
                this._isMenuActive('helpList') && styles.activeStyle)}
              activeStyle={styles.activeStyle}
              title={<span>
                <i className="fa fa-comments-o" style={styles.prefixIcon}/>
                { this.state.i18n('Help') }
              </span>}
            >
              {
                this.state.helpList.map((entry, index) => {
                  return (
                    <NavItem key={index} href={`${this.state.basePath}${entry.path}`}
                      style={[
                        styles.menuItem,
                        this._isItemActive(entry.path) ? styles.menuItemActive : {}
                      ]}
                      linkStyle={styles.menuLink}
                      activeStyle={styles.menuItemActive}
                    >
                      { this.state.i18n(entry.name) }
                    </NavItem>
                  );
                })
              }
              <NavItem key="Forum"
                href="http://labs.mediatek.com/forums/forums/show/48.page"
                target="_blank"
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={styles.menuItemActive}
              >
                { this.state.i18n('Forum') }
              </NavItem>

              <NavItem key="Feedback"
                onClick={::this._handleFeedbackClick}
                style={styles.menuItem}
                linkStyle={styles.menuLink}
                activeStyle={m(
                  styles.menuItemActive,
                  { borderRadius: '0 0 4px 4px' })}
              >
                { this.state.i18n('Feedback') }
              </NavItem>
            </DropdownButton>
            <DropdownButton
              buttonStyle={styles.link}
              activeStyle={styles.activeStyle}
              activeLinkStyle={styles.activeStyle}
              title={<span>
                <i className="fa fa-globe" style={styles.prefixIcon}/>
                { this.state.currentLanguage }
              </span>}
            >
              {
                this.state.languageList.map((entry, index, array) => {
                  return (
                    <NavItem key={index}
                      onClick={e => this._handleSelectLanguage(entry.ISO)}
                      style={[
                        styles.menuItem,
                        entry.name === this.state.currentLanguage ? styles.menuItemActive : {},
                        array.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {}]}
                      linkStyle={styles.menuLink}
                      activeStyle={m(
                        styles.menuItemActive,
                        array.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {})}
                    >
                      { this.state.i18n(entry.name) }
                    </NavItem>
                  );
                })
              }
            </DropdownButton>
            <NavItem href={ this.state.isLogin ? this.state.v2consolePath : `/oauth/${this.state.i18nPrefix ? this.state.i18nPrefix + '/' : ''}login`}
              style={styles.item}
              linkStyle={styles.link}
              activeStyle={styles.activeStyle}
              activeLinkStyle={styles.activeStyle}
            >
              { this.state.isLogin ? this.state.i18n('Return to Console') : this.state.i18n('Sign in / Register now') }
            </NavItem>
          </Nav>
          <Nav style={m(
            !this.state.isMobileMode && {display: 'none'},
            {float: 'right'})}
            onClick={this._handleNavbarClick.bind(this)}
          >
            <DropdownButton
              arrowIcon={false}
              buttonStyle={styles.link}
              title={<span>
                <i className="fa fa-bars"
                  style={[
                    styles.navbar,
                    this.state.isNavbarClicked && {display: 'none'}
                  ]}/>
                <i className="fa fa-close"
                  style={[
                    styles.navbar,
                    !this.state.isNavbarClicked && {display: 'none'}
                  ]}/>
              </span>}
            >
            </DropdownButton>
          </Nav>
        </div>
        <ul style={[
          this.state.isMobileMode && this.state.isNavbarClicked ? styles.tabletsShow : styles.tabletsHide,
          styles.tablets.ul]}>
          <DropdownButtonVertical
            buttonStyle={m(
              styles.link,
              styles.linkVertical,
              this._isMenuActive('resourcesList') && styles.activeStyle)}
            activeStyle={styles.activeStyle}
            title={<span style={styles.dropDownTextVertical}>
              { this.state.i18n('Resources') }
            </span>}
          >
            {
              this.state.resourcesList.map((entry, index) => {
                return (
                  <NavItem key={index}
                    onClick={e => this._handleGotoPage(entry.path.startsWith('http') ? entry.path : this.state.basePath + entry.path)}
                    style={[
                      styles.menuItemVertical,
                      this._isItemActive(entry.path) ? styles.menuItemActive : {}
                    ]}
                    linkStyle={styles.menuLink}
                    activeStyle={styles.menuItemActive}
                  >
                    { this.state.i18n(entry.name) }
                  </NavItem>
                );
              })
            }
          </DropdownButtonVertical>
          <DropdownButtonVertical
            id={this.state.isMobileMode && 'feedbackUserVoice' }
            buttonStyle={m(
              styles.link,
              styles.linkVertical,
              this._isMenuActive('helpList') && styles.activeStyle)}
            activeStyle={styles.activeStyle}
            title={<span style={styles.dropDownTextVertical}>
              { this.state.i18n('Help') }
            </span>}
          >
            {
              this.state.helpList.map((entry, index) => {
                return (
                  <NavItem key={index}
                    onClick={e => this._handleGotoPage(`${this.state.basePath}${entry.path}`)}
                    style={[
                      styles.menuItemVertical,
                      this._isItemActive(entry.path) ? styles.menuItemActive : {}
                    ]}
                    linkStyle={styles.menuLink}
                    activeStyle={styles.menuItemActive}
                  >
                    { this.state.i18n(entry.name) }
                  </NavItem>
                );
              })
            }
            <NavItem key="Forum"
              onClick={e => this._handleGotoPage('http://labs.mediatek.com/forums/forums/show/48.page', '_blank')}
              style={styles.menuItemVertical}
              linkStyle={styles.menuLink}
              activeStyle={styles.menuItemActive}
            >
              { this.state.i18n('Forum') }
            </NavItem>

            <NavItem key="Feedback"
              onClick={::this._handleFeedbackClick}
              style={styles.menuItemVertical}
              linkStyle={styles.menuLink}
              activeStyle={styles.menuItemActive}
            >
              { this.state.i18n('Feedback') }
            </NavItem>
          </DropdownButtonVertical>
          <DropdownButtonVertical
            id="feedbackUserVoice"
            buttonStyle={m(styles.link, styles.linkVertical)}
            activeStyle={styles.activeStyle}
            title={<span style={styles.dropDownTextVertical}>
              { this.state.currentLanguage }
            </span>}
          >
            {
              this.state.languageList.map((entry, index) => {
                return (
                  <NavItem key={index}
                    onClick={e => this._handleSelectLanguage(entry.ISO)}
                    style={[
                      styles.menuItemVertical,
                      entry.name === this.state.currentLanguage ? styles.menuItemActive : {}
                    ]}
                    linkStyle={styles.menuLink}
                    activeStyle={styles.menuItemActive}
                  >
                    { this.state.i18n(entry.name) }
                  </NavItem>
                );
              })
            }
          </DropdownButtonVertical>
          <NavItem
            onClick={e => this._handleGotoPage(this.state.isLogin ? this.state.v2consolePath : `/oauth/${this.state.i18nPrefix ? this.state.i18nPrefix + '/' : ''}login`)}
            style={[
              styles.menuItemVertical,
              styles.activeStyle,
              {background: '#00a1de', cursor: 'pointer', boxShadow: '1px 2px 1px 0 rgba(0,0,0,0.1), 0 0 0 rgba(0,0,0,0.1)'}
            ]}
            linkStyle={styles.link}
            activeStyle={styles.activeStyle}
          >
            { this.state.isLogin ? this.state.i18n('Return to Console') : this.state.i18n('Sign in / Register now') }
          </NavItem>
        </ul>
      </header>
    );
  }

  _handleFeedbackClick() {
    const isChina = /\.cn$/.test(window.location.hostname);

    isChina ? this.userReport.show() : this.userVoice.show();
  }

  /**
  * 切換語言，保持原來的頁面
  *
  * @input  {string} i18nPrefix (ISO)
  * @output redirectUrl
  *
  * @author Michael Hsu
  */

  _handleSelectLanguage(i18nPrefix) {
    let redirectUrl = '';
    let locationPath = window.location.pathname.split(/((resources)|(zh-TW)|(zh-CN)|(en))\//);

    // 位於 resources 時切換語言
    if (/resources/.test(window.location.pathname)) {
      redirectUrl = `${
          window.location.origin + '/'
        }${
          resourcesConfig.base + '/'
        }${
          i18nPrefix + '/'
        }${
          locationPath.pop()
      }`;
    }
    // 位於 /, /7688/ ... etc 時切換語言
    else {
      redirectUrl = window.location.origin; // http://mcs.mediatke.com
      if (locationPath[0] !== '/') {
        redirectUrl += locationPath[0].replace(/\/$/, ''); // etc: 結果 /7688
      }
      redirectUrl += `${'/' + i18nPrefix + '/'}`; // etc: 結果 /zh-TW/
    }

    let i18nHost = /\.((cn)|(com)|(io)|(inc))$/.exec(window.location.hostname);
    i18nHost = i18nHost && i18nHost[0];

    switch (i18nHost){
      case '.cn':
        redirectUrl = redirectUrl.replace('/zh-CN', '');
        break;
      default:
        redirectUrl = redirectUrl.replace('/en', '');
        break;
    }

    // redirect
    window.location = redirectUrl;
  }

  /**
  * 取代 href 的 function，用 JS 去 redirect
  *
  * @input  {string} url
  * @output redirectUrl
  *
  * @author Michael Hsu
  */

  _handleGotoPage(url, _blank) {
    if (_blank) {
      window.open(url, '_blank');
    }
    else {
      // redirect
      window.location = url;
    }
  }

  /**
  * 取得目前的語言名稱
  *
  * @input  {string} i18nPrefix (ISO)
  * @output {string} language name
  *
  * Example: en => English, zh-TW => 繁體中文
  *
  * @author Michael Hsu
  */

  _getCurrentLanguage(i18nPrefix) {
    for (let entry of languagesConfig.langhageList) {
      if (i18nPrefix === entry.ISO) {
        return entry.name;
      }
    }
  }

  /**
  * Menu (Resources / Help) 是否 active
  *
  * @input  {string} listName (resourcesList / helpList)
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isMenuActive(listName) {
    switch (listName) {
      case 'resourcesList':
        return (/resources/.test(window.location.pathname)) && !(/faq/.test(window.location.pathname));
      case 'helpList':
        return (/resources/.test(window.location.pathname)) && (/faq/.test(window.location.pathname));
    }
  }

  /**
  * Item (Resources / Help) 是否 active
  *
  * @input  {string} regPath (introduction / key_conecpt ...)
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isItemActive(regPath) {
    return new RegExp(regPath).test(window.location.pathname);
  }

  /**
  * 處理 media query
  * ref: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Testing_media_queries
  *
  * @input  {object} mql
  *
  * @author Michael Hsu
  */

  _handleMediaQueryChange(mql) {
    this.setState({
      isMobileMode: mql.matches ? true : false
    });
  }

  /**
  * 處理漢堡堡是否點擊展開
  *
  * @author Michael Hsu
  */

  _handleNavbarClick() {
    this.setState({
      isNavbarClicked: !this.state.isNavbarClicked
    });
  }

  /**
  * 處理 basePath 的調整，刪除不需要的 locale
  *
  * @input  (string) basePath
  * @output (string) adjuested basePath
  *
  * Example: 'mcs.mediatek.cn/zh-CN' -> 'mcs.mediatek.cn'
  * Example: 'mcs.mediatek.com/en' -> 'mcs.mediatek.com'
  *
  * @author Michael Hsu
  */

  _adjustPathLocale(path) {
    let i18nHost = /\.((cn)|(com)|(io)|(inc))$/.exec(window.location.hostname);
    i18nHost = i18nHost && i18nHost[0];

    switch (i18nHost){
      case '.cn':
        return path.replace('/zh-CN', '');
      default:
        return path.replace('/en', '');
    }
  }

}

export default Radium(Header);

const styles = {
  header: {
    width: '100%',
    height: 50,
    background: '#00a1de',
    boxShadow: '1px 2px 1px 0 rgba(0,0,0,0.1), 0 0 0 rgba(0,0,0,0.1)',
    position: 'fixed',
    zIndex: 99999,
    fontSize: 13,
    userSelect: 'none'
  },
  container: {
    background: '#00a1de',
    margin: '0 auto',
    padding: '0px 9px',
    maxWidth: 954,
    position: 'relative',
    zIndex: 1002
  },
  tablets: {
    ul: {
      padding: 0,
      margin: 0,
      position: 'relative',
      zIndex: 1001,
      backgroundColor: 'rgb(25, 149, 204)',
      transition: 'transform .2s linear'
    }
  },
  tabletsShow: {
    transform: 'translate3d(0, 0, 0)'
  },
  tabletsHide: {
    transform: 'translate3d(0, -100%, 0)'
  },
  item: {
    marginLeft: '-0.32em'
  },
  link: {
    lineHeight: '50px',
    color: '#fff',
    position: 'relative',
    padding: '19px 12px 17px 12px',
    backgroundColor: '#00a1de',
    zIndex: 1004
  },
  linkVertical: {
    padding: 0,
    display: 'inline-block',
    width: '100%',
    backgroundColor: '#00a1de'
  },
  logoLink: {
    lineHeight: '50px',
    padding: '18px 5px',
    marginRight: 15
  },
  logo: {
    width: 120,
    verticalAlign: 'middle'
  },
  activeStyle: {
    backgroundColor: '#1995cc'
  },
  menuLink: {
    display: 'block',
    clear: 'both',
    fontWeight: '400',
    padding: '10px 20px',
    color: '#fff'
  },
  menuItem: {
    width: '100%',
    height: '40px',
    textAlign: 'left'
  },
  menuItemVertical: {
    width: '100%',
    lineHeight: '40px',
    textAlign: 'center'
  },
  menuItemActive: {
    backgroundColor: '#0c86bc'
  },
  dropDownTextVertical:{
    padding: '0 0 0 34px'
  },
  prefixIcon: {
    position: 'relative',
    marginLeft: 5,
    marginRight: 5,
    fontSize: 13
  },
  navbar: {
    position: 'relative',
    marginLeft: 0,
    marginRight: 0,
    fontSize: 25,
    top: 8
  }
};
