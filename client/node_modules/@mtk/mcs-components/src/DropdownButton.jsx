import React from 'react';
import {PropTypes} from 'react';
import EventListener from 'fbjs/lib/EventListener';
import Radium from 'radium';
import Clickable from './internal/Clickable';
import m from './utils/styleMerger';
import Nav from './Nav';

class DropdownButton extends Clickable {
  constructor(props) {
    super(props);
    this.state = this.state || {};
    this.state.isOpen = false;
  }

  render() {
    const {
      style: menuStyle,
      buttonStyle,
      activeStyle,
      title,
      children,
      id,
      arrowIcon,
      ...props
    } = this.props;

    return (
      <li id={this.props.id} style={[
          styles.item,
          (this.state.isHover || this.state.isOpen) && activeStyle,
          menuStyle
      ]}>
        <span onClick={e => this._handleClick(e)}
          ref="title"
          style={[
            buttonStyle,
            (this.state.isHover || this.state.isOpen) && activeStyle]}>
          {title}
          <i className="fa fa-sort-down" style={[
            styles.dropDownIcon,
            this.state.isOpen ? styles.dropDownIconOpen : styles.dropDownIconClose,
            arrowIcon ? {} : {display: 'none'}
          ]}/>
        </span>
        <Nav dropdownMenu style={m(
          styles.desktopNav,
          this.state.isOpen ? styles.desktopNavShow : styles.desktopNavHide
        )}>
          {
            React.Children.map(children, (child, index) => {
              return React.cloneElement(child, {
                key: index,
                style: [
                  child.props.style,
                  children.length === index + 1 ? { borderRadius: '0 0 4px 4px' } : {}
                ]
              });
            })
          }
        </Nav>
      </li>
    );
  }

  _handleClick(e) {
    e.preventDefault();
    if (this.state.isOpen) {
      return this._hide();
    }

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    this.setState({isOpen: true});
    this._onDocumentClickListener = EventListener.listen(document, 'click', this._hide.bind(this));
    this._onDocumentKeyupListener = EventListener.listen(document, 'keyup', this._hide.bind(this));
  }

  _hide() {
    this.setState({isOpen: false});

    if (this._onDocumentClickListener) {
      this._onDocumentClickListener.remove();
    }

    if (this._onDocumentKeyupListener) {
      this._onDocumentKeyupListener.remove();
    }
  }
}

DropdownButton.propTypes = {
  buttonStyle: PropTypes.object,
  activeStyle: PropTypes.object,
  title: React.PropTypes.oneOfType([
      React.PropTypes.string,
      React.PropTypes.object
    ]),
  arrowIcon: React.PropTypes.bool
};
DropdownButton.defaultProps = {
  arrowIcon: true
};

export default Radium(DropdownButton);

const styles = {
  item: {
    marginLeft: '-0.32em',
    display: 'inline-block',
    listStyleType: 'none',
    cursor: 'pointer',
    position: 'relative'
  },
  desktopNav: {
    display: 'block',
    transition: 'transform .2s linear',
    zIndex: 1003
  },
  desktopNavShow: {
    transform: 'translate3d(0, 0, 0)'
  },
  desktopNavHide: {
    transform: 'translate3d(0, -102%, 0)'
  },
  dropDownIcon: {
    position: 'relative',
    marginLeft: 10,
    marginRight: 5,
    top: '-3px',
    fontSize: 15,
    transition: 'transform .1s linear'
  },
  dropDownIconOpen: {
    top: 4,
    transform: 'rotate(-180deg)'
  },
  dropDownIconClose: {
    top: -3,
    transform: 'rotate(0deg)'
  }
};
