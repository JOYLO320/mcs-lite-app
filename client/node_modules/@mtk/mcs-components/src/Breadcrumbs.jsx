import React from 'react';
import Radium from 'radium';
import * as I18n from './utils/i18n';
import resourcesConfig from './configs/resources';
import getLocale from './utils/getLocale.js';

/**
* 麵包屑導航
* for mcs-resources project
*
* @author Michael Hsu
*/

class Breadcrumbs extends React.Component {
  componentWillMount() {
    // 取得現在網址代表的語言
    let i18nPrefix = getLocale(window.location.href);

    let basePath = `${
        window.location.origin + '/'
      }${
        resourcesConfig.base + '/'
      }${
        i18nPrefix ? i18nPrefix + '/' : ''
      }${
        resourcesConfig.version + '/'
    }`;

    // i18n 設定
    I18n.setup({
      lng: i18nPrefix
    })
    .then((i18n) => {
      this.setState({ i18n: i18n.t });
    })

    .catch((error) => {
      console.log(error);
    });

    this.setState({
      basePath: this._adjustPathLocale(basePath),
      resourcesList: resourcesConfig.resourcesList.concat(resourcesConfig.helpList).concat(resourcesConfig.otherList),
      tutorialList: resourcesConfig.tutorialList,
      isTutorialBreadcrumbsShow: this._isTutorialBreadcrumbsShow(),
      isMobileBreadcrumbsShow: this._isMobileBreadcrumbsShow(),
      changeLogVersion: this._getChangeLogVersion(),
      i18n: function(text) { return text; }
    });
  }

  render() {
    const {
      ...otherProps
    } = this.props;

    return (
      <div {...otherProps}
        style={styles.container}>
        <div style={styles.breadcrumbs}>
          <a href={`${this.state.basePath}${this.state.resourcesList[0].path}`}
            style={styles.text}>
            <span>
              { this.state.i18n('Resources') }
            </span>
          </a>
          <span style={[
            styles.hide,
            this.state.isTutorialBreadcrumbsShow || this.state.isMobileBreadcrumbsShow ? styles.show : {}]}>
            <span style={[
              styles.text,
              styles.textNextIcon]}>
              &nbsp; {'>'} &nbsp;
            </span>
            <a href={`${this.state.basePath}${this.state.isTutorialBreadcrumbsShow ? 'tutorial' : 'mobile_application'}`}
              style={styles.text}>
              <span>
                { this.state.isTutorialBreadcrumbsShow ? this.state.i18n('Tutorial') : this.state.i18n('Mobile application') }
              </span>
            </a>
          </span>
          {
            this.state.resourcesList.map((entry, index) => {
              return (
                <span key={index}
                  style={[
                  styles.hide,
                  this._isItemActive(entry.path) && entry.name !== 'Tutorial' && styles.show]}>
                  <span style={[
                    styles.text,
                    styles.textNextIcon]}>
                    &nbsp; {'>'} &nbsp;
                  </span>
                  <a href={`${this.state.basePath}${entry.path}`}
                    style={styles.text}>
                    <span>
                      { this.state.i18n(entry.name) }
                    </span>
                  </a>
                </span>
              );
            })
          }
          {
            this.state.tutorialList.map((entry, index) => {
              return (
                <span key={index}
                  style={[
                  styles.hide,
                  this._isItemActive(entry.path) && styles.show]}>
                  <span style={[
                    styles.text,
                    styles.textNextIcon]}>
                    &nbsp; {'>'} &nbsp;
                  </span>
                  <a href={`${this.state.basePath}${entry.path}`}
                    style={styles.text}>
                    <span>
                      { this.state.i18n(entry.name) }
                    </span>
                  </a>
                </span>
              );
            })
          }

          <span style={[
            styles.hide,
            this.state.changeLogVersion ? styles.show : {}]}>
            <span style={[
              styles.text,
              styles.textNextIcon]}>
              &nbsp; {'>'} &nbsp;
            </span>
            <a href={`${this.state.basePath}change_log/${this.state.changeLogVersion}`}
              style={styles.text}>
              <span>
                { this.state.changeLogVersion }
              </span>
            </a>
          </span>
        </div>
      </div>
    );
  }

  /**
  * 判斷該頁 Resources / Help 是否顯示麵包屑
  *
  * @input  {string} regPath (introduction / key_conecpt ...)
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isItemActive(regPath) {
    return new RegExp(regPath).test(window.location.pathname);
  }

  /**
  * 是否顯示中間的 Tutorial 麵包屑
  * 目前有兩種狀況：tutorial, development_cycle
  *
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isTutorialBreadcrumbsShow() {
    return new RegExp('tutorial').test(window.location.pathname) || new RegExp('development_cycle').test(window.location.pathname);
  }

  /**
  * 是否顯示中間的 Mobile 麵包屑
  * 目前有一種狀況：7681_firmware_update
  *
  * @output {boolean}
  *
  * @author Michael Hsu
  */

  _isMobileBreadcrumbsShow() {
    return new RegExp('7681_firmware_update').test(window.location.pathname);
  }

  /**
  * 是否顯示中間的 Change log 麵包屑
  * change_log
  *
  * @output {integer} null || version
  *
  * @author Michael Hsu
  */

  _getChangeLogVersion() {
    let changeLogVersion = /change_log\/.*(.html)?/.exec(window.location.pathname);
    changeLogVersion = changeLogVersion && changeLogVersion[0].replace(/(change_log\/)|(.html)/g, '');
    return changeLogVersion;
  }

  /**
  * 處理 basePath 的調整，刪除不需要的 locale
  *
  * @input  (string) basePath
  * @output (string) adjuested basePath
  *
  * Example: 'mcs.mediatek.cn/zh-CN' -> 'mcs.mediatek.cn'
  * Example: 'mcs.mediatek.com/en' -> 'mcs.mediatek.com'
  *
  * @author Michael Hsu
  */

  _adjustPathLocale(path) {
    let i18nHost = /\.((cn)|(com)|(io)|(inc))$/.exec(window.location.hostname);
    i18nHost = i18nHost && i18nHost[0];

    switch (i18nHost){
      case '.cn':
        return path.replace('/zh-CN', '');
      default:
        return path.replace('/en', '');
    }
  }
}

export default Radium(Breadcrumbs);

const styles = {
  container: {
    position: 'absolute',
    marginTop: 50,
    width: '100%',
    height: '1em'
  },
  breadcrumbs: {
    background: 'none',
    margin: '0 auto',
    padding: '8px 8px 8px 15px',
    maxWidth: 954
  },
  text: {
    fontSize: 13,
    padding: '0',
    color: '#00a1de',
    textDecoration: 'none',
    outline: 'none'
  },
  textNextIcon: {
    color: 'black'
  },
  hide: {
    display: 'none'
  },
  show: {
    display: 'inline-block'
  }
};
