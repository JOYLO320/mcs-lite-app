'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _scrollToJs = require('./scrollTo.js');

var _scrollToJs2 = _interopRequireDefault(_scrollToJs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

/**
* getDynamicSection
* 動態產生文章的段落 Section list
*
* @input  {string} scopeClassName 文章的範圍
*
* @output {array} sectionList {innerText, element}
*
* innerText: 段落標題，取用 <h1> 標籤。
* element: (HTMLCollections array) 之後取用 offsetTop 屬性用。
*
* @author Michael Hsu
*/

var getDynamicSection = function getDynamicSection(scopeClassName) {
  var scopeElement = scopeClassName ? document.getElementsByClassName(scopeClassName)[0] : document.getElementsByTagName('body')[0];
  scopeElement = scopeElement || document.getElementsByTagName('body')[0];
  var sectionHTMLCollections = scopeElement.getElementsByTagName('h1');

  var sectionList = _lodash2['default'].map(sectionHTMLCollections, function (elem) {
    var element = elem.children[0] || elem; /* Pick the first child as content when there is multiple children in h1 tag. */

    // firefox 使用 innerHTML 屬性，其他瀏覽器使用 innerText
    return {
      innerText: element.innerText || element.innerHTML,
      element: element
    };
  });

  return sectionList;
};

exports.getDynamicSection = getDynamicSection;
/**
* Scroll 滾動特效
* offset 60: header height
*
* @input {integer} index，判斷第一個要滾到頂。
* @input {HTMLCollection} element，取目前章節的 offetTop。
* @input {integer} offset，偏差值。
*
* @author Michael Hsu
*/

var scrollTo = function scrollTo(_ref) {
  var index = _ref.index;
  var element = _ref.element;
  var offset = _ref.offset;

  if (index === 0) {
    // first one scroll to top
    (0, _scrollToJs2['default'])(0);
  } else {
    (0, _scrollToJs2['default'])(element.offsetTop - Number(offset));
  }
};

exports.scrollTo = scrollTo;
/**
* 取得目前位置的 Offset
*
* @input {integer} offset 60 為 Header 高度
*
* @output {integer} Y + offset 60
*
* @author Michael Hsu
*/

var getCurrentOffset = function getCurrentOffset(offset) {
  return window.scrollY + Number(offset);
};

exports.getCurrentOffset = getCurrentOffset;
/**
* 動態產生 Section list 文章段落間的差距
*
* @input {string} scopeClassName 文章的範圍
*
* @return Promise
*
* @output {array} [77, 269, 3706, 3777]
*
* @author Michael Hsu
*/

var getSectionIntervalsAsync = function getSectionIntervalsAsync(scopeClassName) {
  return new Promise(function (resolve, reject) {
    var scopeElement = scopeClassName ? document.getElementsByClassName(scopeClassName)[0] : document.getElementsByTagName('body')[0];
    scopeElement = scopeElement || document.getElementsByTagName('body')[0];
    var sectionHTMLCollections = scopeElement.getElementsByTagName('h1');

    // imgList: 內容總共有多少張圖片
    var imgList = document.getElementsByTagName('img');

    // imgLoadedCounter: 目前已載入幾張圖片
    var imgLoadedCounter = 0;

    var sectionIntervals = [];

    for (var i = 0; i < imgList.length; i++) {
      checkAllImagesLoaded(imgList[i]);
    }

    function checkAllImagesLoaded(img) {
      img.addEventListener('load', function () {
        imgLoadedCounter += 1;

        // 圖片已經全部載入完成
        if (imgLoadedCounter === imgList.length) {
          // sectionIntervals: 紀錄 section 之間的距離
          var _sectionIntervals = _lodash2['default'].map(sectionHTMLCollections, function (element) {
            return element.offsetTop;
          });

          resolve(_sectionIntervals);
        }
      });
    }
  });
};

exports.getSectionIntervalsAsync = getSectionIntervalsAsync;
/**
* 回傳目前應該 Active 第幾個 li 的 index
*
* sensitive: 觸發敏感度微調。
*
* @input {array} sectionIntervals
*
* @output {integer} index
*
* @author Michael Hsu
*/

var getLiActiveIndex = function getLiActiveIndex(_ref2) {
  var sectionIntervals = _ref2.sectionIntervals;
  var sensitive = _ref2.sensitive;
  var offset = _ref2.offset;

  var currentOffset = getCurrentOffset(offset);

  var liActiveIndex = 0;
  for (var i = 0; i < sectionIntervals.length; i++) {
    if (currentOffset + Number(sensitive) > sectionIntervals[i + 1]) {
      liActiveIndex = liActiveIndex + 1;
    } else {
      break;
    }
  }

  return liActiveIndex;
};
exports.getLiActiveIndex = getLiActiveIndex;