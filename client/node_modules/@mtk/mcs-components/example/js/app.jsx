import 'font-awesome-webpack';
import '../styl/main.styl';
import React from 'react';
import Header from 'mcs-components/Header';
import LayoutHeader from 'mcs-components/LayoutHeader';
import Footer from 'mcs-components/Footer';
import Nav from 'mcs-components/Nav';
import NavItem from 'mcs-components/NavItem';
import Toast from 'mcs-components/Toast';
import Button from 'mcs-components/Button';
import Breadcrumbs from 'mcs-components/Breadcrumbs';
import SideBarMenu from 'mcs-components/SideBarMenu';
import ParagraphSelector from 'mcs-components/ParagraphSelector';
import { DisplayCard as DisplaySwitchCard } from 'mcs-components/datachannels/switch';
import { ControlCard as ControlSwitchCard } from 'mcs-components/datachannels/switch';
import { ControlCard as ControlAnalogCard } from 'mcs-components/datachannels/analog';
import { DisplayCard as DisplayStringCard } from 'mcs-components/datachannels/string';
import { ControlCard as ControlStringCard } from 'mcs-components/datachannels/string';
import { DisplayCard as DisplayFloatCard } from 'mcs-components/datachannels/float';
import { ControlCard as ControlFloatCard } from 'mcs-components/datachannels/float';
import { DisplayCard as DisplayIntegerCard } from 'mcs-components/datachannels/integer';
import { ControlCard as ControlIntegerCard } from 'mcs-components/datachannels/integer';
import { DisplayCard as DisplayCategoryCard } from 'mcs-components/datachannels/category';
import { ControlCard as ControlCategoryCard } from 'mcs-components/datachannels/category';
import { DisplayCard as DisplayHexCard } from 'mcs-components/datachannels/hex';
import { ControlCard as ControlHexCard } from 'mcs-components/datachannels/hex';
import { DisplayCard as DisplayPwmCard } from 'mcs-components/datachannels/pwm';
import { ControlCard as ControlPwmCard } from 'mcs-components/datachannels/pwm';
import { ControlCard as ControlPwmSliderCard } from 'mcs-components/datachannels/pwmslider';
import { DisplayCard as DisplayGPIOCard } from 'mcs-components/datachannels/gpio';
import { ControlCard as ControlGPIOCard } from 'mcs-components/datachannels/gpio';

const App = React.createClass({
  render() {
    let logout = () => {
      console.log('logout');
    };

    return (
      <div>
        <Header />
        <LayoutHeader
          isManager
          logoutFn={logout}
          nickname='evenchange4'
          numberOfCards={3}
          imageUrl='http://img.mediatek.com/150/mtk.linkit/profile/3492e14e-f0fb-4718-a9a7-a49e95d8cb30.jpeg'>
        </LayoutHeader>
        <Breadcrumbs></Breadcrumbs>
        <SideBarMenu scopeClassName='resource' sensitive={5} offset={60}></SideBarMenu>
        <ParagraphSelector
          style={{ position: 'fixed', right: '120px', top: '120px' }}
          scopeClassName='resource'
          offset={60}>
        </ParagraphSelector>
        <div style={{padding: '50px 0', height: 100}}>

          <Toast
            isShow={true}
            handleYes={() => { console.log('yaa'); }}

            handleNo={() => { console.log('naa'); }}

            primary={'Yes, please'}
            cancel={'No, thanks'}
          >
            Do you want to go to the website of your language?
          </Toast>

          <h1>
            gi
            <a>
              Hi, MediaTek Clous Sandbox(MCS) enables the user to manage
            </a>
          </h1>
          I am body.
          <Nav>
            <NavItem href="a" style={{margin: 10}} activeStyle={{background: 'red'}} activeLinkStyle={{fontSize: '2em'}}>1</NavItem>
            <NavItem href="b" style={{margin: 10}}>2</NavItem>
            <NavItem href="c" style={{margin: 10}}>3</NavItem>
          </Nav>
        </div>
        <div>
          <Button kind="primary">Primary</Button>
          <Button kind="cancel">Cancel</Button>
        </div>
        <div class="mcs-grid-lg-12 resource" style={{paddingLeft: '200px'}}>
          <h1 id="managing-firmware">Data Channel Card</h1>
          <h3>GPIO</h3>
          <ControlGPIOCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1. Taiwan no.1."
            numberOfCards={3}
            values={{ value: 1 }}
            recordedAt={1454395072337}
            configs={{ card: 1 }}
          />
          <br />
          <h4> 2 card: </h4>
          <ControlGPIOCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 1 }}
            recordedAt={1454395072337}
            configs={{ card: 2 }}
          />
          <br />
          <h4> 1 card ( numberOfCards = 3) : </h4>
          <DisplayGPIOCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 1 }}
            recordedAt={1454395072337}
            configs={{ card: 1 }}
          />
          <br />
          <h4> 3 card ( numberOfCards = 2) : </h4>
          <DisplayGPIOCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={2}
            values={{ value: 1 }}
            recordedAt={1454395072337}
            configs={{ card: 3 }}
          />
          <h3>String</h3>
          <ControlStringCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            channelType="String"
            values={{ value: "I am Angrypug. Taiwan no.1" }}
            recordedAt={1454395072337}
            numberOfCards={3}
            configs={{ card: 1 }}
          />
          <DisplayStringCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            channelType="String"
            values={{ value: "I am Angrypug. Taiwan no.1" }}
            recordedAt={1454395072337}
            numberOfCards={3}
            configs={{ card: 1 }}
          />
          <h3>Hex</h3>
          <ControlHexCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            values={{ value: "WEJN86867VC588657XER123WERQ7OIKYKGSDRS12323" }}
            recordedAt={1454395072337}
            numberOfCards={3}
            channelType="Hex"
            configs={{ card: 1 }}
          />
          <DisplayHexCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            channelType="Hex"
            values={{ value: "WEJN86867VC588657XER123WERQ7OIKYKGSDRS12323" }}
            recordedAt={1454395072337}
            numberOfCards={3}
            configs={{ card: 1 }}
          />
          <h3>Integer</h3>
          <ControlIntegerCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 100 }}
            recordedAt={1454395072337}
            unit="omg"
            configs={{ card: 1 }}
          />
          <DisplayIntegerCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 100 }}
            recordedAt={1454395072337}
            unit="omg"
            configs={{ card: 1 }}
          />
          <h3>Float</h3>
          <ControlFloatCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: "100.0" }}
            recordedAt={1454395072337}
            unit="omg"
            configs={{ card: 1 }}
          />
          <DisplayFloatCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: "100.0" }}
            recordedAt={1454395072337}
            unit="omg"
            configs={{ card: 1 }}
          />
          <h3>Analog (only control)</h3>
          <ControlAnalogCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            lowerbound={0}
            upperbound={100}
            values={{ value: 20 }}
            recordedAt={1454395072337}
            onChange={ e => true }
            numberOfCards={3}
            configs={{ card: 1 }}
          />
          <h3>Switch</h3>
          <DisplaySwitchCard
            deviceId="Dq3Gsi4K"
            name="(Display)testtest"
            dataChnId="controller"
            description="Taiwan no.1"
            values={{ value: 0 }}
            recordedAt={1454395072337}
            numberOfCards={3}
            configs={{ card: 1 }}
          />
          <ControlSwitchCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 0 }}
            recordedAt={1454395072337}
            configs={{ card: 1 }}
          />
          <h3>PWM</h3>
          <ControlPwmCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 100, period: 800 }}
            recordedAt={1454395072337}
            configs={{ card: 1 }}
          />
          <ControlPwmSliderCard
            name="(Control)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            numberOfCards={3}
            values={{ value: 100, period: 800 }}
            recordedAt={1454395072337}
            configs={{ card: 1 }}
          />
          <DisplayPwmCard
            name="(Display)testtest"
            dataChnId="123123123"
            description="Taiwan no.1"
            recordedAt={1454395072337}
            values={{ value: 100, period: 800 }}
            numberOfCards={3}
            configs={{ card: 1 }}
          />
          <h3>DisplayCategoryCard</h3>
          <DisplayCategoryCard
            name="categories"
            numberOfCards={3}
            numberOfCategory={2}
            format={[{ name: 'cat1', value: '0' }, { name: 'cat2', value: '1' }]}
            configs={{ card: 1 }}
            dataChnId="ca1"
            values={{ value: "1" }}
            description="categories2"
          />
          <DisplayCategoryCard
            name="categories"
            numberOfCards={3}
            numberOfCategory={3}
            format={[{ name: 'cat1', value: '0' }, { name: 'cat2', value: '1' }, { name: 'cat3', value: '2' }]}
            configs={{ card: 1 }}
            dataChnId="ca1"
            values={{ value: "2" }}
            description="categories3"
          />
          <DisplayCategoryCard
            name="categories"
            numberOfCards={3}
            numberOfCategory={4}
            format={[{ name: 'cat1', value: '0' }, { name: 'cat2', value: '1' }, { name: 'cat3', value: '2' }, { name: 'cat4', value: '3' }]}
            configs={{ card: 1 }}
            dataChnId="ca1"
            values={{ value: "3" }}
            description="categories4"
          />
          <DisplayCategoryCard
            name="categories"
            numberOfCards={3}
            numberOfCategory={5}
            dataChnId="ca1"
            format={[{ name: 'cat1', value: '0' }, { name: 'cat2', value: '1' }, { name: 'cat3', value: '2' }, { name: 'cat4', value: '3' }, { name: 'cat5', value: '4' }]}
            numberOfCards={3}
            values={{ value: "4" }}
            description="categories5"
            configs={{ card: 1 }}
          />
        </div>
        <div class="mcs-grid-lg-12 resource" style={{paddingLeft: '200px'}}>
          <h1 id="managing-firmware">Managing Firmware</h1>
          <p>MediaTek Clous Sandbox(MCS) enables the user to manage the firmware and provides firmware Over-The-Air (FOTA) update to the device.</p>
          <p>To use the Firmware service, go to the <strong>Firmware tab</strong> in the Prototype detail page.</p>
          <p>Click <strong>Add firmware</strong> to first upload a new firmware,</p>
          <p><img src="https://raw.githubusercontent.com/Mediatek-Cloud/MCS/master/graphics/firmware/fw01.JPG" alt=""></img></p>
          <p>Enter the Firmware name, version, and select a firmware file to upload and click the Upload button.</p>
          <p>Next, select the compatible firmware of the fimrware you just uploaded.</p>
          <p><img src="https://raw.githubusercontent.com/Mediatek-Cloud/MCS/master/graphics/firmware/fw02.jpg" alt=""></img></p>
          <p>Choose the prerequisite firmware that are compatible for this firmware you&#39;ve uploaded.</p>
          <p>The default option is all firmware selected or you can specify your own selection by click on the limited firmware. Only the firmware listed in the prerequisite list can be upgraded using the firmware you&#39;ve uploaded.</p>
          <p>If you do not want to further proceed to directly pushing the firmware upgrade to test devices, you can stop here by clikc on the Done button, or to click on the Next button to push the firmware to devices.</p>
          <p><img src="https://raw.githubusercontent.com/Mediatek-Cloud/MCS/master/graphics/firmware/fw03.JPG" alt=""></img></p>
          <p>After selecting the devices you would like to upgrade, click the Push botton. You can also do this step by click on the first icon next to the firmware.</p>
          <p><img src="https://raw.githubusercontent.com/Mediatek-Cloud/MCS/master/graphics/firmware/fw04.JPG" alt=""></img></p>
          <p>The user can also upgrade the firmware of a device in the Device detail page. In the Device detail page, click on the frimware tab, and you will see the current using firmware and the firmware that the device can be upgraded to.</p>
          <p><img src="https://raw.githubusercontent.com/Mediatek-Cloud/MCS/master/graphics/firmware/fw05.JPG" alt=""></img></p>
          <p>Click on the <strong>Upgrade</strong> button next to the firmware that you want the device to be upgraded.</p>
          <h1 id="-">資料點</h1>
          <h1 id="-">上傳資料點</h1>
          <h2 id="-">描述</h2>
          <p>使用 <strong>HTTPs POST</strong> 來上傳資料點</p>
          <h2 id="-url">請求 URL</h2>
          <pre><code>https://api.mediatek.com/mcs/v2/devices/:deviceId/datapoints
          </code></pre><p>API請求默認值為 JSON 格式，如欲使用 CSV 格式，請在 API 請求 URL 最後端加上<code>.csv</code>。</p>
          <h2 id="-">動作</h2>
          <p>HTTPs POST</p>
          <h2 id="-">參數</h2>
          <h3 id="header">Header</h3>
          <p><strong>Token</strong></p>
          <p>若是裝置：</p>
          <pre><code>deviceKey: `device_key_here`
          </code></pre><p>若是使用者：</p>
          <pre><code>Authorization: Bearer token
          </code></pre><p><strong>Content Type</strong></p>
          <p>JSON 格式:</p>
          <pre><code>Content-Type:`application/json`
          </code></pre><p>Comma Separated Value (CSV) 格式:</p>
          <pre><code>Content-Type:`text/csv`
          </code></pre><h3 id="-">內容</h3>
          <h4 id="csv-">CSV 格式:</h4>
          <p>語法:</p>
          <p><em>:Data_Channel_Id_1, :Timestamp, :Value_1, :Value_2, :Value_3\n</em></p>
          <p><em>:Data_Channel_Id_2, :Timestamp, :Value_1\n</em></p>
          <p>如欲參考更多詳細的資料通道類型之格式，請參考以下連結
          <a href="api_references#data_channel_format">here</a>.</p>
          <p>請注意：若您不需要上傳裝置的時間點,則您可保持 <em>Timestamp</em> 為空(但保留逗號)，此時時間點則會由MCS所收到資料點的時間。</p>
          <p>範例：</p>
        </div>
        <Footer></Footer>
      </div>
    );
  }

});

export default App;
